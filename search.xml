<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Git]]></title>
    <url>%2F2019%2F06%2F10%2Fgit%2F</url>
    <content type="text"><![CDATA[毋庸置疑，Git 是目前最流行、最好用的版本控制系统，在它的基础上，催生出了GitHub和GitLab两个当前最流行的代码托管平台。 配置123456git config —-global user.name ‘your_name’git config —-global user.email ‘your_email@domain.com’git config --local --listgit config --global --listgit config --system --list 创建Git Repo 把已有代码纳入到git管理. git init 123456789ls -algit initgit add .git add -u 更新内容替换暂存区git rm filenamegit statusgit commit -m ‘message’git log 新建项目直接用git管理. git init your_project git命令上面的四条命令在工作目录、暂存目录(也叫做索引)和仓库之间复制文件。 git add files 把当前文件放入暂存区域。 git commit 给暂存区域生成快照并提交。 git reset – files 用来撤销最后一次git add files，你也可以用git reset 撤销所有暂存区域文件。 git checkout – files 把文件从暂存区域复制到工作目录，用来丢弃本地修改。你可以用 git reset -p, git checkout -p, or git add -p进入交互模式。 git commit -a 相当于运行 git add 把所有当前目录下的文件加入暂存区域再运行。git commit. git commit files 进行一次包含最后一次提交加上工作目录中文件快照的提交。并且文件被添加到暂存区域。 git checkout HEAD – files 回滚到复制最后一次提交。 git initgit add/rm123456git addfind .git/objects -type f# 删除文件git rm &lt;file_name&gt; git statusgit commit 123456# 暂存区内容做提交git commit -m'commit msg'# 工作区内容直接提交不经过暂存区git commit -am'commit msg'git commit -m 'messge' --author="name&lt;email&gt;"指定commit的作者的名字和邮箱` git mv文件重命名 123456git mv readme readme.md## 等同于mv readme readme.mdgit add readme.mdgit rm readme git log git log –all 查看所有分支的历史 git log –all –graph 查看图形化的 log 地址 git log –oneline 查看单行的简洁历史。 git log –oneline -n4 查看最近的四条简洁历史。 git log –oneline –all -n4 –graph 查看所有分支最近 4 条单行的图形化历史。 git help –web log 跳转到git log 的帮助文档网页 Notes: enter q to exit. git config --system --list 12345alias.l=log --graph --all --pretty=format:'%C(yellow)%h%C(cyan)%d%Creset %s %C(white)- %an, %ar%Creset'alias.ll=log --stat --abbrev-commitalias.lg=log --color --graph --pretty=format:'%C(bold white)%h%Creset -%C(bold green)%d%Creset %s %C(bold green)(%cr)%Creset %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit --date=relativealias.llg=log --color --graph --pretty=format:'%C(bold white)%H %d%Creset%n%s%n%+b%C(bold blue)%an &lt;%ae&gt;%Creset %C(bold green)%cr (%ci)' --abbrev-commitalias.d=diff 123git lggit llgit llg git自带了图形界面工具gitk. 在repo folder下面运行gitk。效果如下： 12gitkgitk --all git checkout 123# 废弃工作区变更git checkout -- [&lt;file_name&gt;] git branch12345# 查看所有分支git branch -av# 删除分支git branch -d &lt;branch_name&gt;git branch -D &lt;branch_name&gt; git cat-file12345find .git/objects -type f# show contentgit cat-file -p uuid# show typegit cat-file -t uuid git rebase12345# change old commit messagegit rebase -i &lt;parent-commit-id&gt; # with r# combine commits 合并commitsgit rebase -i &lt;parent-commit-id&gt; # with s git diff 1234567891011# 比较工作区和暂存区区别。git diffgit diff -- [&lt;file_name&gt;]#暂存区和HEAD进行比较git diff --cached# 比较某文件两次不同提交的差异git diff &lt;commit_id1&gt; &lt;commit_id2&gt; -- &lt;file_name&gt;# 比较某文件两个不同分支的差异git diff &lt;branch_1&gt; &lt;branch_2&gt; -- &lt;file_name&gt; git resetreset命令把当前分支指向另一个位置，并且有选择的变动工作目录和索引。也用来在从历史仓库中复制文件到索引，而不动工作目录。 如果不给选项，那么当前分支指向到那个提交。 如果用–hard选项，那么工作目录也更新， 如果用–soft选项，那么都不变。 如果没有给出提交点的版本号，那么默认用HEAD。这样，分支指向不变，但是索引会回滚到最后一次提交，如果用–hard选项，工作目录也同样。 123# 取消暂存区所有内容，跟HEAD保持一致git reset HEADgit reset --hard &lt;commit_id&gt; 如果给了文件名(或者 -p选项), 那么工作效果和带文件名的checkout差不多，除了索引被更新。 git cherry-pickcherry-pick命令”复制”一个提交节点并在当前分支做一次完全一样的新提交。 Furhter Making gitk look sexy on Mac OS X 图解Git]]></content>
      <categories>
        <category>技(Skill)</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>scm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Code Formatter]]></title>
    <url>%2F2019%2F05%2F10%2Fcode-formatter%2F</url>
    <content type="text"><![CDATA[PrettierPrettier EditConfigEditConfig .editorconfig sample: 123456789101112131415161718192021222324252627282930313233# EditorConfig is awesome: https://EditorConfig.org# top-most EditorConfig fileroot = true# Unix-style newlines with a newline ending every file[*]end_of_line = lfinsert_final_newline = true# Matches multiple files with brace expansion notation# Set default charset[*.&#123;js,py&#125;]charset = utf-8# 4 space indentation[*.py]indent_style = spaceindent_size = 4# Tab indentation (no size specified)[Makefile]indent_style = tab# Indentation override for all JS under lib directory[lib/**.js]indent_style = spaceindent_size = 2# Matches the exact files either package.json or .travis.yml[&#123;package.json,.travis.yml&#125;]indent_style = spaceindent_size = 2 Prettier formatter for Visual Studio Code .editorconfig 123456789101112root = true[*]indent_style = spaceindent_size = 4end_of_line = lfcharset = utf-8trim_trailing_whitespace = trueinsert_final_newline = false[*.md]indent_style = tabindent_size = 4 .prettierrc.yaml or .prettierrc.yaml12345678910111213141516171819printWidth: 80tabWidth: 2singleQuote: falsetrailingComma: &quot;none&quot;bracketSpacing: truesemi: trueuseTabs: falseproseWrap: &quot;preserve&quot;arrowParens: &quot;avoid&quot;quoteProps: &quot;as-needed&quot;endOfLine: &quot;lf&quot;overrides: - files: &quot;**/*.md&quot; options: tabWidth: 4 useTabs: true - files: &quot;**/*.js&quot; options: singleQuote: true]]></content>
      <categories>
        <category>器(Tool)</category>
      </categories>
      <tags>
        <tag>Prettier</tag>
        <tag>EditConfig</tag>
        <tag>VS Code</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Run SAPUI5 SDK locally]]></title>
    <url>%2F2019%2F03%2F29%2Fsapui5-local-run%2F</url>
    <content type="text"><![CDATA[Network performance of loading SAPUI5 library from a far away data center is driving me crazy, CDN cannot be used in some scenarios. I need faster and offline enabled, SAPUI5 Web IDE Personal Edition is good for running my application locally. But I do not find how to run UI5 SDK(Demo Kit and Testsuite) that need to solve resource access issue(It should be possible, but I don’t have time to learn Jetty currently), and there is upload limit for SAP Web IDE. So the idea is running all locally with lightweight server, not tomcat. Step-by-Step guide Download SAPUI5 SDK from SAP Tools for SAPUI5 Install node.js if not already done. Cheeck it by runningnode --version Unzip the download SAPUI5 SDK just now. Go to the root folder. Create file package.json as below in the root. 123456789101112131415161718192021&#123; "name": "sapui5-sdk-1.63.1", "version": "1.0.0", "description": "sapui5 sdk", "main": "index.js", "directories": &#123; "doc": "docs" &#125;, "scripts": &#123; "test": "echo \"Error: no test specified\" &amp;&amp; exit 1", "start": "node node_modules/@sap/approuter/approuter.js" &#125;, "author": "", "license": "ISC", "engines": &#123; "node": "&gt;=6.0.0" &#125;, "dependencies": &#123; "@sap/approuter": "^5.13.1" &#125;&#125; Create file default-env.json as below in the root 1234567891011121314&#123; "xsappname": "sapui5", "destinations": [ &#123; "name": "northwind", "url": "http://services.odata.org/" &#125;, &#123; "name": "nodejs", "url": "http://localhost:5000", "forwardAuthToken": true &#125; ]&#125; Create file xs-app.json as below in the root. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&#123; "welcomeFile": "/index.html", "authenticationMethod": "none", "routes": [ &#123; "source": "^/rest/.*", "destination": "nodejs" &#125;, &#123; "source": "^/socket.io/.*", "destination": "nodejs", "csrfProtection": false &#125;, &#123; "source": "^/test-resources/testsuite/resources/(.*)$", "target": "$1", "localDir": "resources" &#125;, &#123; "source": "^/test-resources/testsuite/test-resources/(.*)$", "target": "$1", "localDir": "test-resources" &#125;, &#123; "source": "^(/sap/.*)$", "target": "$1", "localDir": "resources" &#125;, &#123; "source": "^/resources/(.*)$", "target": "$1", "localDir": "resources" &#125;, &#123; "source": "^/test-resources/(.*)$", "target": "$1", "localDir": "test-resources" &#125;, &#123; "source": "^/dest/srv/odata/northwind/(.*)$", "target": "$1", "destination": "northwind", "authenticationType": "none" &#125;, &#123; "source": "^(/.*)$", "target": "$1", "localDir": "./" &#125; ], "websockets": &#123; "enabled": true &#125;&#125; Create file .npmrc as below in the root 12egistry=http://nexus.wdf.sap.corp:8081/nexus/repository/build.milestones.npm/strict-ssl=false Run CMD npm install Run SAPUI5 SDK locally by CMD npm start Useful Linkage UI5 Demo Kit - UI Development Toolkit for HTML5 http://localhost:5000/test-resources/testsuite/testframe.html http://localhost:5000/test-resources/sap/ushell/shells/sandbox/fioriSandbox.html http://localhost:5000/test-resources/sap/ushell/shells/demo/FioriLaunchpad.html#Shell-home http://localhost:5000/test-resources/sap/suite/ui/generic/template/demokit/flpSandbox.html#Shell-home http://localhost:5000/test-resources/sap/fe/demokit/flpSandbox.html#Shell-home http://localhost:5000/test-resources/sap/gantt/simple/GanttChartArtifacts.html]]></content>
      <categories>
        <category>技(Skill)</category>
      </categories>
      <tags>
        <tag>sapui5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git Command]]></title>
    <url>%2F2019%2F02%2F22%2Fgit-command%2F</url>
    <content type="text"><![CDATA[Collection Remove all files to create an empty working directory 123git rm -rf .git commit -a -m 'delete all files'git push origin gh-pages Add content and push 1234echo "My Page" &gt; index.htmlgit add index.htmlgit commit -a -m "First pages commit"git push origin master Deploying a subfolder to GitHub Pages 1234git checkout master # you can avoid this line if you are in master...git subtree split --prefix dist -b gh-pages # create a local gh-pages branch containing the splitted output foldergit push -f origin gh-pages:gh-pages # force the push of the gh-pages branch to the remote gh-pages branch at origingit branch -D gh-pages # delete the local gh-pages because you will need it: ref Rebase123 C---D---E your_branch /A---B---F---G master After rebase as following: 123 C&apos;--D&apos;--E&apos; your_branch /A---B---F---G master Using rebase to solve below 2 issues: This branch is out-of-date with the base branch This branch has conflicts that must be resolved Process Flow: git checkout master, and then git pull git checkout &lt;your_branch&gt;, if need, do git pull git rebase master Option step if there are CONFLICTs. change conflicts and save them git add &lt;file_name&gt; or git add . Note: do not need commit during fixing conflicts. git rebase --continue loop above if conflicts still existed. git push -u origin &lt;your_branch&gt; --force ResetResetting remote to a certain commitAssuming that your branch is called master both here and remotely, and that your remote is called origin you could do: git checkout &lt;your_branch&gt; git log , find the commit-hash git reset &lt;commit-hash&gt; , undoes all commits after [commit]4 git push -f origin &lt;your_branch&gt; Note: git remote -v to get remote information git log --pretty=oneline or git log -2 to show version history Cherry pick git checkout &lt;the_branch_contains_that_commit&gt; git log --oneline -3 find the commit id git checkout &lt;your_branch&gt; git cherry-pick &lt;commit&gt; -n –no-commit commit by yourself.]]></content>
      <categories>
        <category>技(Skill)</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[gh-pages Deployment]]></title>
    <url>%2F2019%2F02%2F21%2Fgh-pages-deployment%2F</url>
    <content type="text"><![CDATA[Deploying a subfolder to GitHub PagesSometimes you want to have a subdirectory on the master branch be the root directory of a repository’s gh-pages branch. For the sake of this example, let’s pretend the subfolder containing your site is named dist. Step 1Make sure no other changes in master branch.Remove the dist directory from the project’s .gitignore file. That mean original dist is ignored in master branch. Step 2Make sure git knows about your subtree (the subfolder with your site). 1git add dist &amp;&amp; git commit -m "Initial dist subtree commit" Step 3Use subtree push to send it to the gh-pages branch on GitHub. 1git subtree push --prefix dist origin gh-pages Boom. If your folder isn’t called dist, then you’ll need to change that in each of the commands above. If you do this on a regular basis, you could also create a script as following: 12345678#!/bin/shif [ -z "$1" ]then echo "Which folder do you want to deploy to GitHub Pages?" exit 1figit add $1 &amp;&amp; git commit -m "Initial folder as a subtree commit"git subtree push --prefix $1 origin gh-pages Run above shell as below: 12# if file path is bin/git-deploy-gh-pages.shbash bin/git-deploy-gh-pages.sh dist Better Approach git checkout master # you can avoid this line if you are in master… git subtree split –prefix dist -b gh-pages # create a local gh-pages branch containing the splitted output folder git push -f origin gh-pages:gh-pages # force the push of the gh-pages branch to the remote gh-pages branch at origin git branch -D gh-pages # delete the local gh-pages because you will need it: ref or: git push origin git subtree split --prefix build_folder master:gh-pages –force or:If you want to immediately push to gh-pages as soon as you’ve committed updates to the website, you can try this: (replace site with your own specific subdirectory) 12345678#!/bin/bash# if anything in the site/ subdirectory changed in the prior commit,# push that directory to gh-pages for auto generation.git diff-tree -r --name-only --no-commit-id master | grep '^site/' &amp;&gt; /dev/nullif [ $? == 0 ]; then git push origin `git subtree split --prefix site master 2&gt; /dev/null`:gh-pages --forcefi GitHub Pages User, Organization, and Project Pages Creating Project Pages using the command line Configuring a publishing source for GitHub Pages]]></content>
      <categories>
        <category>技(Skill)</category>
        <category>器(Tool)</category>
      </categories>
      <tags>
        <tag>gh-pages</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Revealjs]]></title>
    <url>%2F2019%2F02%2F21%2Frevealjs%2F</url>
    <content type="text"><![CDATA[A tool to create web slides. This focus on vscode-reveal that a markdown file as a slides. See here for live demo. Github: https://github.com/hakimel/reveal.js#full-setup Live Demo: https://revealjs.com/#/ Other demos: https://github.com/yisibl/share Online Editor: ttps://slides.com VSCode Extension: https://github.com/evilz/vscode-reveal Sample My live demo as a cookbook: http://blog.ant-abel.com/revealjs-cookbook/ https://github.com/ant-abel/revealjs-cookbook Tips Slides can be nested inside of each other as Vertical Slides. Use the Space key to navigate through all slides. Press ESC to enter the slide overview. Alt + Click: Zoom in. Repeat to zoom back out. Press the S key to show speaker view. It includes a timer, preview of the upcoming slide as well as your speaker notes. Press . on your keyboard to pause the presentation. Press B or click on the pencil button to open and close your chalkboard. Click the left mouse button to write on the chalkboard Click the right mouse button to wipe the chalkboard Click the DEL key to clear the chalkboard, for MacOS, fn + del By pressing C or clicking the button you can start and stop the notes taking mode allowing you to write comments and notes directly on the slide. Click the left mouse button to write on the chalkboard Click the right mouse button to wipe the chalkboard Click the DEL key to clear the chalkboard, for MacOS, fn + del Press M to open or close the menu. CTRL + SHIFT + F handles finding a text string anywhere in the slides. vscode-revealhttps://github.com/evilz/vscode-reveal Installation Download the latest version of reveal.js from https://github.com/hakimel/reveal.js/releases Unzip and replace the example contents in index.html with your own Open index.html in a browser to view it Folder Structure css/ Core styles without which the project does not function js/ Like above but for JavaScript plugin/ Components that have been developed as extensions to reveal.js lib/ All other third party assets (JavaScript, CSS, fonts) InstructionsMarkupHere’s a barebones example of a fully working reveal.js presentation: 123456789101112131415161718&lt;html&gt; &lt;head&gt; &lt;link rel="stylesheet" href="css/reveal.css" /&gt; &lt;link rel="stylesheet" href="css/theme/white.css" /&gt; &lt;/head&gt; &lt;body&gt; &lt;div class="reveal"&gt; &lt;div class="slides"&gt; &lt;section&gt;Slide 1&lt;/section&gt; &lt;section&gt;Slide 2&lt;/section&gt; &lt;/div&gt; &lt;/div&gt; &lt;script src="js/reveal.js"&gt;&lt;/script&gt; &lt;script&gt; Reveal.initialize(); &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; The presentation markup hierarchy needs to be .reveal &gt; .slides &gt; section where the section represents one slide and can be repeated indefinitely. If you place multiple section elements inside of another section they will be shown as vertical slides. The first of the vertical slides is the “root” of the others (at the top), and will be included in the horizontal sequence. For example: 123456789&lt;div class="reveal"&gt; &lt;div class="slides"&gt; &lt;section&gt;Single Horizontal Slide&lt;/section&gt; &lt;section&gt; &lt;section&gt;Vertical Slide 1&lt;/section&gt; &lt;section&gt;Vertical Slide 2&lt;/section&gt; &lt;/section&gt; &lt;/div&gt;&lt;/div&gt; MarkdownIt’s possible to write your slides using Markdown. To enable Markdown, add the data-markdown attribute to your &lt;section&gt; elements and wrap the contents in a &lt;textarea data-template&gt; like the example below. You’ll also need to add the plugin/markdown/marked.js and plugin/markdown/markdown.js scripts (in that order) to your HTML file. This is based on data-markdown from Paul Irish modified to use marked to support GitHub Flavored Markdown. Sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks). 12345678&lt;section data-markdown&gt; &lt;textarea data-template&gt; ## Page title A paragraph with some text and a [link](http://hakim.se). &lt;/textarea &gt;&lt;/section&gt; External MarkdownYou can write your content as a separate file and have reveal.js load it at runtime. Note the separator arguments which determine how slides are delimited in the external file: the data-separator attribute defines a regular expression for horizontal slides (defaults to ^\r?\n---\r?\n$, a newline-bounded horizontal rule) and data-separator-vertical defines vertical slides (disabled by default). The data-separator-notes attribute is a regular expression for specifying the beginning of the current slide’s speaker notes (defaults to notes?:, so it will match both “note:” and “notes:”). The data-charset attribute is optional and specifies which charset to use when loading the external file. When used locally, this feature requires that reveal.js runs from a local web server. The following example customises all available options: 123456789101112&lt;section data-markdown="example.md" data-separator="^\n\n\n" data-separator-vertical="^\n\n" data-separator-notes="^Note:" data-charset="iso-8859-15"&gt; &lt;!-- Note that Windows uses `\r\n` instead of `\n` as its linefeed character. For a regex that supports all operating systems, use `\r?\n` instead of `\n`. --&gt;&lt;/section&gt; Element AttributesSpecial syntax (through HTML comments) is available for adding attributes to Markdown elements. This is useful for fragments, amongst other things. 123456&lt;section data-markdown&gt; &lt;script type="text/template"&gt; - Item 1 &lt;!-- .element: class="fragment" data-fragment-index="2" --&gt; - Item 2 &lt;!-- .element: class="fragment" data-fragment-index="1" --&gt; &lt;/script&gt;&lt;/section&gt; Slide AttributesSpecial syntax (through HTML comments) is available for adding attributes to the slide &lt;section&gt; elements generated by your Markdown. 123456&lt;section data-markdown&gt; &lt;script type="text/template"&gt; &lt;!-- .slide: data-background="#ff0000" --&gt; Markdown content &lt;/script&gt;&lt;/section&gt; Configuring markedWe use marked to parse Markdown. To customise marked’s rendering, you can pass in options when configuring Reveal: 1234567Reveal.initialize(&#123; // Options which are passed into marked // See https://github.com/chjj/marked#options-1 markdown: &#123; smartypants: true &#125;&#125;); ConfigurationAt the end of your page you need to initialize reveal by running the following code. Note that all configuration values are optional and will default to the values specified below. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123Reveal.initialize(&#123; // Display presentation control arrows controls: true, // Help the user learn the controls by providing hints, for example by // bouncing the down arrow when they first encounter a vertical slide controlsTutorial: true, // Determines where controls appear, "edges" or "bottom-right" controlsLayout: 'bottom-right', // Visibility rule for backwards navigation arrows; "faded", "hidden" // or "visible" controlsBackArrows: 'faded', // Display a presentation progress bar progress: true, // Display the page number of the current slide slideNumber: false, // Push each slide change to the browser history history: false, // Enable keyboard shortcuts for navigation keyboard: true, // Enable the slide overview mode overview: true, // Vertical centering of slides center: true, // Enables touch navigation on devices with touch input touch: true, // Loop the presentation loop: false, // Change the presentation direction to be RTL rtl: false, // Randomizes the order of slides each time the presentation loads shuffle: false, // Turns fragments on and off globally fragments: true, // Flags whether to include the current fragment in the URL, // so that reloading brings you to the same fragment position fragmentInURL: false, // Flags if the presentation is running in an embedded mode, // i.e. contained within a limited portion of the screen embedded: false, // Flags if we should show a help overlay when the questionmark // key is pressed help: true, // Flags if speaker notes should be visible to all viewers showNotes: false, // Global override for autoplaying embedded media (video/audio/iframe) // - null: Media will only autoplay if data-autoplay is present // - true: All media will autoplay, regardless of individual setting // - false: No media will autoplay, regardless of individual setting autoPlayMedia: null, // Number of milliseconds between automatically proceeding to the // next slide, disabled when set to 0, this value can be overwritten // by using a data-autoslide attribute on your slides autoSlide: 0, // Stop auto-sliding after user input autoSlideStoppable: true, // Use this method for navigation when auto-sliding autoSlideMethod: Reveal.navigateNext, // Specify the average time in seconds that you think you will spend // presenting each slide. This is used to show a pacing timer in the // speaker view defaultTiming: 120, // Enable slide navigation via mouse wheel mouseWheel: false, // Hides the address bar on mobile devices hideAddressBar: true, // Opens links in an iframe preview overlay // Add `data-preview-link` and `data-preview-link="false"` to customise each link // individually previewLinks: false, // Transition style transition: 'slide', // none/fade/slide/convex/concave/zoom // Transition speed transitionSpeed: 'default', // default/fast/slow // Transition style for full page slide backgrounds backgroundTransition: 'fade', // none/fade/slide/convex/concave/zoom // Number of slides away from the current that are visible viewDistance: 3, // Parallax background image parallaxBackgroundImage: '', // e.g. "'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg'" // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. "2100px 900px" // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: null, parallaxBackgroundVertical: null, // The display mode that will be used to show slides display: 'block'&#125;); The configuration can be updated after initialization using the configure method: 12345// Turn autoSlide offReveal.configure(&#123; autoSlide: 0 &#125;);// Start auto-sliding every 5sReveal.configure(&#123; autoSlide: 5000 &#125;);]]></content>
      <categories>
        <category>技(Skill)</category>
        <category>器(Tool)</category>
      </categories>
      <tags>
        <tag>reveeal</tag>
        <tag>slides</tag>
        <tag>ppt</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Web Slides]]></title>
    <url>%2F2019%2F02%2F19%2Fppt%2F</url>
    <content type="text"><![CDATA[PPT Slides Online https://slides.com/ http://yanshuo.io/ https://ppt.baomitu.com/ Web Slides https://github.com/ksky521/nodeppt http://js8.in/nodeppt/ https://github.com/webslides/WebSlides https://webslides.tv/demos/ https://github.com/hakimel/reveal.js/ https://revealjs.com/ Demo: https://www.jianshu.com/p/e78cce9d5af0 https://github.com/gnab/remark https://remarkjs.com/ https://github.com/impress/impress.js http://impress.js.org https://github.com/yhatt/marp/ https://yhatt.github.io/marp/ Reference 5 of the Best Free HTML5 Presentation Systems]]></content>
      <categories>
        <category>器(Tool)</category>
      </categories>
      <tags>
        <tag>PPT</tag>
        <tag>Slides</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MkDocs]]></title>
    <url>%2F2019%2F02%2F18%2Fmkdocs%2F</url>
    <content type="text"><![CDATA[GeneralProject documentation with Markdown. MkDocs is a fast, simple and downright gorgeous static site generator that’s geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file. MkDocs builds completely static HTML sites that you can host on GitHub pages, Amazon S3, or anywhere else you choose. Great themes available Install with a Package Manager 1brew install mkdocs Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. mkdocs gh-deploy - Deploy your documentation to GitHub Pages Project layout 1234mkdocs.yml # The configuration file.docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Deploying GitHub Pages User, Organization, and Project Pages Creating Project Pages using the command line Configuring a publishing source for GitHub Pages User Guide Writing your docs Styling your docs Configuration Deploying your docs Custom themes Plugins Theme: Material for MkDocs Hands-on install mkdocs 1brew install mkdocs or 12345// install pip for the first timecurl https://bootstrap.pypa.io/get-pip.py -o get-pip.pysudo python get-pip.pypip install mkdocs Initial MkDocs Project 1234567&gt; mkdocs -hUsage: mkdocs [OPTIONS] COMMAND [ARGS]...&gt; mkdocs new scpINFO - Creating project directory: scpINFO - Writing config file: scp/mkdocs.ymlINFO - Writing initial docs: scp/docs/index.md Sync with GitHub Repo 123456git initecho 'site/' &gt;&gt; .gitignoregit add .git commit -m "init my MkDocs project"git remote add origin git@github.wdf.sap.corp:I074174/scp.gitgit push -u origin master Note:Once you have a master branch, if you need to remove all content from the working directory. using git rm -rf Build to generate site 123&gt; mkdocs buildINFO - Cleaning site directoryINFO - Building documentation to directory: /Users/i074174/Documents/GitHub/scp/site Deploy it as Project Github pages 123456&gt; mkdocs gh-deployNFO - Cleaning site directoryINFO - Building documentation to directory: /Users/i074174/Documents/GitHub/scp/siteWARNING - Version check skipped: No version specificed in previous deployment.INFO - Copying &apos;/Users/i074174/Documents/GitHub/scp/site&apos; to &apos;gh-pages&apos; branch and pushing to GitHub.INFO - Your documentation should be available shortly. Your site is published at https://github.wdf.sap.corp/pages/I074174/scp/ Change the themeInstall the latest version of Material with pip: 1pip install mkdocs-material Append the following line to your project’s mkdocs.yml: 12theme: name: 'material' 12345678910111213141516171819202122232425262728site_name: Abel's CAP Docstheme: name: 'material' logo: 'img/cap-logo.png' site_favicon: 'images/favicon.ico'nav: - Home: index.md - CDS: cds.md - Get Started: - Tutorials: tutorials.mdmarkdown_extensions: - admonition - codehilite: guess_lang: true - toc: permalink: true - footnotes - pymdownx.superfencesextra_javascript: - 'javascripts/extra.js'extra_css: - 'css/extra.css'copyright: Copyright &amp;copy; 2018 SAP SE. All rights reserved. INTERNAL ONLY. Maintained by the &lt;a href="https://people.wdf.sap.corp/profiles/I074174"&gt;Abel Zhang&lt;/a&gt;. Any changes to repeat step 4 and 5. VSCode settings:add .vscode/settings.json 12345678910111213&#123; "pasteImage.path": "$&#123;projectRoot&#125;/docs/img", "[markdown]": &#123; "editor.tabSize": 4, "editor.detectIndentation": false &#125;, "markdown.extension.list.indentationSize": "inherit", "markdownlint.config": &#123; "MD007": &#123; "indent": 4 &#125; &#125;&#125; To fix Python-Markdown issue Incorrect rendering of nested lists, you have to set tab size is 4. Reference MkDocs]]></content>
      <categories>
        <category>器(Tool)</category>
      </categories>
      <tags>
        <tag>MkDocs</tag>
        <tag>GitHub Pages</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux Command Line]]></title>
    <url>%2F2019%2F01%2F22%2Flinux-command-line%2F</url>
    <content type="text"><![CDATA[man: 查看命令说明 export: 显示所有的环境变量 echo $VARIABLE_NAME 获取某个变量的详细信息 echo $HOME, /Users/&lt;your-username&gt; printenv, 打印环境变量 echo: echo Hello World or echo -ne &quot;Hello\nWorld\n&quot; echo $SHELL whereis 系统自动构建的数据库来搜索可执行文件，源文件和手册页面。 which 它在环境变量 PATH 指定的目录中搜索可执行文件。此命令将打印可执行文件的完整路径。 clear 清除窗口上的内容。 sudo: allows a permitted user to execute a command as the superuser or another user pwd: 当前工作目录 ls: 列出您的文件 ls -a: 列出所有文件，包括隐藏文件 ls -l: 列出“长格式”的文件 ls **/* or ls *.js cd: 切换目录 mkdir：创建 folder cp: 拷贝（Copy） 12cp source &lt;.|target&gt;cp -r src_folder &lt;.|target&gt; where: 查找引用 where ruby ps: process status. ps aux wget:wget 是 linux 上的命令行的下载工具。这是一个 GPL 许可证下的自由软件。wget 支持 HTTP 和 FTP 协议，支持代理服务器和断点续传功能，能够自动递归远程主机的目录，找到合乎条件的文件并将其下载到本地硬盘上；如果必要，wget 将恰当地转换页面中的超级连接以在本地生成可浏览的镜像。由于没有交互式界面，wget 可在后台运行，截获并忽略 HANGUP 信号，因此在用户推出登录以后，仍可继续运行。通常，wget 用于成批量地下载 Internet 网站上的文件，或制作远程网站的镜像。 install: brew install wget , about Homebrew wget https://github.wdf.sap.corp/Entitlement/ems-ui-app-entl-mgmt/blob/master/webapp/Component.js wget -d http://192.168.1.168 下载 192.168.1.168 首页并且显示下载信息 wget -q http://192.168.1.168 下载 192.168.1.168 首页并且不显示下载信息 wget -i filelist.txt 批量下载 wget -c http://example.com/really-big-file.iso 断点续传 wget -b 后台下载 IP and Mac 12345678910which ifconfig/sbin/ifconfigifconfig | grep 192.168ifconfig en0 | grep inet | grep -v inet6 | cut -d ' ' -f210.130.227.38host 10.130.227.3838.227.130.10.in-addr.arpa domain name pointer C02VR4LUHTD8.dhcp.ctul.sap.corp. Copy the contents of the file id_rsa.pub to the clipboard: 1pbcopy &lt; ~/.ssh/id_rsa.pub cat /proc/version kernel version cat /proc/meminfo free and used memory in the system cat /proc/cpuinfo cpu/hardware information 参考 10 分钟学会 Linux 常用 bash 命令 Introduction to Linux Learn Unix in 10 Minutes Linux Commandline Cheat Sheet]]></content>
      <categories>
        <category>技(Skill)</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>command</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mac-zsh]]></title>
    <url>%2F2019%2F01%2F22%2Fmac-zsh%2F</url>
    <content type="text"><![CDATA[Zsh 添加自己Functions 安装配置 Zsh oh-my-zsh zsh-autosuggestions 安装 awesome-terminal-font 参考 ZshZsh 是 Linux 的一种 Shell 外壳，和 bash 属于同类产品, 都是命令解释器。Mac 和一般 Linux 默认的 Shell 是 bash。 特色： 不区分大小写智能提示。我是不喜欢大小写区分的那种人，所以用了 zsh 之后，经常按 Tab 进行提示。 此外按下 tab 键显示出所有待选项后，再按一次 tab 键，即进入选择模式，进入选择模式后，按 tab 切向下一个选项，按 shift + tab 键切向上一个选项，ctrl+f/b/n/p 可以向前后左右切换。 kill + 空格键 + Tab 键，列出运行的进程 要啥哪个进程不需要再知道 PID 了，当然了 zsh，提供了让你知道 PID 的方法：比如输入：kill vim，再按下 tab，会变成：kill 5643 ls **/*，分层级地列出当前目录下所有文件及目录，并递归目录 ls *.png 查找当前目录下所有 png 文件 ls **/*.png 递归查找 zsh 的目录跳转很智能，你无需输入 cd 就可直接输入路径即可。比如：.. 表示后退一级目录，../../ 表示后退两级，依次类推。 在命令窗口中输入：d，将列出当前 session 访问过的所有目录，再按提示的数字即可进入相应目录。 添加自己Functions Create file ./zsh-funcs.zsh with below funcations: 123say-helloworld()&#123; echo 'Hello World!'&#125; Add the following to your ~/.zshrc:source ~/zsh-funcs.zsh Start a new terminal session. now you can run commond say-helloworld. 安装配置ZshZsh （Mac 系统自带，无需安装)。 可以通过 cat /etc/shells. echo $SHELL 查看默认 Shell chsh -s /bin/zsh oh-my-zsh由于 Zsh 配置门槛有点高，或者说需要专门花时间去了解 Zsh 才能配置好一个好用的 Zsh，也因为这样，用户也就相对少了。直到有一天 oh-my-Zsh 的作者诞生，他想要整理出一个配置框架出来，让大家直接使用他的这个公认最好的 Zsh 配置，省去繁琐的配置过程。所以，oh-my-Zsh 就诞生了，它只是会了让你减少 Zsh 的配置，然后又可以好好享受 Zsh 这个 Shell。 安装 oh-my-zsh sh -c &quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot; 安装 Monaco for Powerline 字体, 将该仓库克隆到本地，然后进入工程目录的 Monaco 目录，双击后缀名为 .otf 的字体文件即可完成该字体的安装。安装该字体的原因主要是为了和 Oh-My-Zsh 的 powerlevel9k 主题相兼容，如果不安装该字体，那么后面安装 powerlevel9kn 主题后会出现乱码。 安装主题Oh-My-Zsh powerlevel9k 主题git clone https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k更多关于该主题的定制请看 customizing-prompt-segments； 修改 ~/.zshrc 配置文件，配置该主题ZSH_THEME=&quot;powerlevel9k/powerlevel9k&quot; 默认的命令提示符为 user@userdemackbookPro，这样的提示符配合 powerlevel9k 主题太过冗长，因此我选择将该冗长的提示符去掉，在 ~/.zshrc 配置文件后面追加如下内容DEFAULT_USER=”user” 设置 oh-my-zsh powerlevel9k 主题左边元素显示12POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(context dir rbenv vcs) # 设置 oh-my-zsh powerlevel9k 主题右边元素显示POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status root_indicator background_jobs time) 配置 zsh 命令语法高亮, zsh-syntax-highlighting Clone this repository in oh-my-zsh’s plugins directory:git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting 关于 oh-my-zsh 插件的管理是很简单的，有两个插件目录： /Users/user/.oh-my-zsh/plugins: oh-my-zsh 官方插件目录，该目录已经预装了很多实用的插件，只不过没激活而已. git：oh-my-zsh 默认开启的，没什么好说的； extract：通用的解压缩插件，可以解压缩任何后缀的压缩文件，使用方法很简单：x 文件名； z：很智能的目录跳转插件，能记录之前 cd 过哪些目录，然后模糊匹配跳转，不需要输入全路径即可跳转，使用方法：z dir_pattern注意：重启生效。 /Users/user/.oh-my-zsh/custom/plugins: oh-my-zsh 第三方插件目录； zsh-autosuggestionsmacOS via Homebrew Install the zsh-autosuggestions package using Homebrew. brew install zsh-autosuggestions Add the following to your .zshrc: source /usr/local/share/zsh-autosuggestions/zsh-autosuggestions.zsh Start a new terminal session. 安装 awesome-terminal-font参考 一个 Java 程序员眼中的 Mac OS（系列六：终端方案 iTerm2 + Zsh） Mac 终端配置（Mac OSX + iTerm2 + Zsh + Oh-My-Zsh 定制一款漂亮的终端]]></content>
      <categories>
        <category>器(Tool)</category>
      </categories>
      <tags>
        <tag>terminal</tag>
        <tag>shell</tag>
        <tag>bash</tag>
        <tag>iterm2</tag>
        <tag>Zsh</tag>
        <tag>Oh-My-Zsh</tag>
        <tag>powerlevel9k</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iTerm2]]></title>
    <url>%2F2019%2F01%2F22%2Fmac-iterm2%2F</url>
    <content type="text"><![CDATA[基本内容 安装配置 参考 基本内容 iTerm2 作者意思：Mac 的默认终端 Terminal 太难用了，我们开发一个新的终端来代替它吧。 智能选中 连续双击选中，连续三击选中整行，连续四击智能选中（智能规则可配置），可以识别网址，引号引起的字符串，邮箱地址等。 选中即复制。即任何选中状态的字符串都被放到了系统剪切板中。 个人设置 hotkey window - option - all window - option + 常用快捷键 command + ;: 历史记录 字母 + command + ;: 根据输入的前缀自动补全 command + [/]: 切换屏幕 command + enter: 进入全屏，再按一次返回 command + 鼠标点击: 可以打开文件，文件夹和链接 command + n: 新建新的 Window 窗口 command + t: 新建标签页 command + Option + 数字: 切换 Window 窗口 command + w: 关闭当前标签或是窗口 command + d: 竖直分屏 command + shift + d: 水平分屏 command + r: 清屏 command + /: 按完之后，整个屏幕变成白茫茫的，而光标位置是一个小圆圈清除显示出来 command + f: 查找，所查找的内容会被自动复制 ,输入查找的部分字符，找到匹配的值按 tab，即可复制，带有补全功能 command + option + e: 全屏并排展示所有已经打开的标签页，带有可以搜索。 command + Option + b: 历史回放，记录最近时间内的操作。有一个类似播放器的进度条可以拖动查看你做了什么。存放内容设置（Preferences -&gt; Genernal -&gt; Instant Replay）。 command + shift + h: 查看剪贴板历史 command + Shift + m: 可以保存当前位置，之后可以按 Command + Shift + j 跳回这个位置. command + shift + alt + w: 关闭所有窗口 control + u: 清空当前行，无论光标在什么位置 Control + a: 移动到行首 Control + e: 移动到行尾 Control + r: 搜索历史命令 Control + w: 删除光标之前的单词 Control + y: 召回最近用命令删除的文字 安装配置 下载地址，官网：https://iterm2.com/ 更改配色方案 目前大家喜欢设置的配色方案为 solarized. 推荐 Solarized Dark Higher Contrast将该配色方案文件（Solarized Dark Higher Contrast.itermcolors）复制出来，保存到本地，文件命名为 SolarizedDarkHigherContrast.itermcolors ，然后双击即可安装 Hotkey Window (快速调出窗口) show/hide all windows with systm-wide hotkey Hotkey Window: 有时候只是执行几行命令，然后就不再使用它。可是我们还是必须要打开终端，使用完成后关闭它。但是用 iTerm2 这个功能只要按快捷键，出来虚化的终端，输入命令，然后再把光标放在其他地方自动就消息了。 参考 一个 Java 程序员眼中的 Mac OS（系列六：终端方案 iTerm2 + Zsh）]]></content>
      <categories>
        <category>器(Tool)</category>
      </categories>
      <tags>
        <tag>terminal</tag>
        <tag>shell</tag>
        <tag>bash</tag>
        <tag>iterm2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Homebrew]]></title>
    <url>%2F2019%2F01%2F22%2Fmac-homebrew%2F</url>
    <content type="text"><![CDATA[The missing package manager for macOS(macOS 缺失的软件包的管理器) Install Homebrew/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; 使用 Homebrew 安装 Apple 没有预装但 你需要的东西。brew install wget Homebrew 会将软件包安装到独立目录，并将其文件软链接至 /usr/local 。 12345678$ cd /usr/local$ find CellarCellar/wget/1.16.1Cellar/wget/1.16.1/bin/wgetCellar/wget/1.16.1/share/man/man1/wget.1\$ ls -l binbin/wget -&gt; ../Cellar/wget/1.16.1/bin/wget Homebrew 不会将文件安装到它本身目录之外，所以您可将 Homebrew 安装到任意位置。 完全基于 Git 和 ruby，所以自由修改的同时你仍可以轻松撤销你的变更或与上游更新合并。 Homebrew 使 macOS 更完整。使用 gem 来安装 gems、用 brew 来安装那些依赖包。 1234brew install gitbrew install wgetbrew install Zshsh -c "$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-Zsh/master/tools/install.sh -O -)" References Homebrew]]></content>
      <categories>
        <category>器(Tool)</category>
      </categories>
      <tags>
        <tag>homebrew</tag>
        <tag>brew</tag>
        <tag>packge manager</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MacOS 个人常用软件推荐]]></title>
    <url>%2F2019%2F01%2F21%2Fmac-apps%2F</url>
    <content type="text"><![CDATA[系统小工具 Alfred 类似系统自带的 Spotlight， 但是功能更强大， 查看Alfred 摘记 Iterm2 Shell, Terminal bash, Zsh(mac-zsh) Homebrew, 查看Homebrew Enpass 密码管理 1Password Dr. Unarchiver AppCleaner App Cleaner &amp; Uninstaller iStat Menus，菜单栏系统监控（内存，网速，磁盘，电池…..) Cinch 分屏 Moom Magnet Cheetsheet 长安 command 查看 app 所有快捷键 Cinch 分屏 Magnet Cheetsheet 长安 command 查看 app 所有快捷键 Xnip 截图软件 Snagit Xmind 思维导图 iThoughtsX 编辑器 VsCode 前端开发，Markdown 编辑神器. 参考 程序员如何优雅地使用 macOS？]]></content>
      <categories>
        <category>器(Tool)</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>mac os</tag>
        <tag>app</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Alfred 摘记]]></title>
    <url>%2F2019%2F01%2F17%2Fmac-alfred%2F</url>
    <content type="text"><![CDATA[Highlight General Features Default Results File Search Web Search Termianl / Shell Workflow Reference Highlight 热键打开主界面: option+command(默认设置) Alfred 建议我们可以通过 Open + 关键字 或者 Space（空格键 来查询文件或者文件, find路径查找，in文件查找 Web Search: 通过 Key 选择用于搜索的网站，如 ask hellworld. Calculator: Input 1024+1024\*1024 filter buffer ⌥↑(add to buffer), ⌥→(action for all), ⌥ backspace(remove all buffer) fn + tab: to action selected item shift 或 Command + Y: to quick view selected item option + command + \\(⌥⌘\\): actions for all selected item in finder option + command + / (⌥⌘/): 路径方式展示当前目录 Clipboard: option + command + c (⌥⌘c) Dictionary: define: Pressing the Return key will open the word in Dictionary.app spell: best guess of the word you want to spell, pressing the Return key will copy the correct spelling to your clipboard. cmd + o to open in app. General Startup：设置系统启动时是否自启动。 Alfred Hotkey：设置呼出 Alfred 的热键。 Where are you：这个设置比较特别，因为 Alfred 内置了常用网站搜索功能，在这里设置了你所在的国家后，Alfred 在搜索时会打开搜索网站对应国家的网站 FeaturesDefault Results Essentials: 搜索「应用程序」、「联系人」、「设置」 Etras Alfred 建议我们可以通过 Open + 关键字 或者 Space（空格键) 来查询文件或者文件夹 Search Scope: 设置 Alfred 查询时会搜索的文件夹 Fallbacks: 如果没有查到结果使用 Google 还是其它网站来搜索结果 File Search Use the “open” keyword to open a file (or press the spacebar as a shortcut) Use the “find” keyword to reveal the file in Finder Use the “in” keyword to search inside your files’ content Note: File Filters to create custom search File Navigation / (slash) to take you to the root folder on your Mac, or ~ (tilde) to go to your user directory. /* (star) to file name File Buffer ⌥↑ to add a file to the buffer from Alfred’s results ⌥↓ to add a file and move to the next item in your list of results ⌥← to remove the last item from the buffer ⌥→ to action all items in the buffer ⌥ backspace to remove all items from the buffer File Previews shift: to quick look selected item Actions →: to action selected item Want to take action on multiple files at once? Select them in Finder and press the Finder Selection hotkey (which is ⌥⌘\ by default). Want to add your own custom file actions? Take a look at the File Action Triggers Web Search Add custom search baidu: http://www.baidu.com/s?ie=UTF-8&amp;wd={query} zhihu: https://www.zhihu.com/search?type=content&amp;q={query} jianshu: https://www.jianshu.com/search?q={query} Fallbacks of defalt search settings: Termianl / Shell Refer to https://github.com/stuartcryan/custom-iterm-applescripts-for-alfred 123456789101112131415161718192021222324252627282930313233343536373839404142434445-- This is v0.7 of the custom script for AlfredApp for iTerm 3.1.1+-- created by Sinan Eldem www.sinaneldem.com.tron alfred_script(q) if application "iTerm2" is running or application "iTerm" is running then run script " on run &#123;q&#125; tell application \"iTerm\" activate try select first window set onlywindow to true on error create window with default profile select first window set onlywindow to true end try tell the first window if onlywindow is false then create tab with default profile end if tell current session to write text q end tell end tell end run " with parameters &#123;q&#125; else run script " on run &#123;q&#125; tell application \"iTerm\" activate try select first window on error create window with default profile select first window end try tell the first window tell current session to write text q end tell end tell end run " with parameters &#123;q&#125; end ifend alfred_script WorkflowReference Alfred Help and Support 从零开始学习 Alfred：基础功能及设置 杀手级功能 WorkFlows 介绍(1)-Alfred 使用手册 2]]></content>
      <categories>
        <category>器(Tool)</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>mac os</tag>
        <tag>app</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker]]></title>
    <url>%2F2018%2F09%2F21%2Fdocker%2F</url>
    <content type="text"><![CDATA[DockerDocker is a platform for developers and sysadmins to develop, deploy, and run applications with containers. The use of Linux containers to deploy applications is called containerization. Containers are not new, but their use for easily deploying applications is.Containerization is increasingly popular because containers are: Flexible: Even the most complex applications can be containerized. Lightweight: Containers leverage and share the host kernel. Interchangeable: You can deploy updates and upgrades on-the-fly. Portable: You can build locally, deploy to the cloud, and run anywhere. Scalable: You can increase and automatically distribute container replicas. Stackable: You can stack services vertically and on-the-fly. Docker 的思想来自于集装箱，集装箱解决了什么问题？在一艘大船上，可以把货物规整的摆放起来。并且各种各样的货物被集装箱标准化了，集装箱和集装箱之间不会互相影响。那么我就不需要专门运送水果的船和专门运送化学品的船了。只要这些货物在集装箱里封装的好好的，那我就可以用一艘大船把他们都运走。 Docker EngineDocker Engine is a client-server application with these major components: A server which is a type of long-running program called a daemon process (the dockerd command). A REST API which specifies interfaces that programs can use to talk to the daemon and instruct it what to do. A command line interface (CLI) client (the docker command). The CLI uses the Docker REST API to control or interact with the Docker daemon through scripting or direct CLI commands. Many other Docker applications use the underlying API and CLI. The daemon creates and manages Docker objects, such as images, containers, networks, and volumes. Docker architectureDocker uses a client-server architecture. The Docker client talks to the Docker daemon, which does the heavy lifting of building, running, and distributing your Docker containers. The Docker client and daemon can run on the same system, or you can connect a Docker client to a remote Docker daemon. The Docker client and daemon communicate using a REST API, over UNIX sockets or a network interface. Images and containersA container is launched by running an image. An image is an executable package that includes everything needed to run an application the code, a runtime, libraries, environment variables, and configuration files. A container is a runtime instance of an image what the image becomes in memory when executed (that is, an image with state, or a user process). You can see a list of your running containers with the command, docker ps, just as you would in Linux. Containers and virtual machinesA container runs natively on Linux and shares the kernel of the host machine with other containers. It runs a discrete process, taking no more memory than any other executable, making it lightweight. By contrast, a virtual machine (VM) runs a full-blown “guest” operating system with virtual access to host resources through a hypervisor. In general, VMs provide an environment with more resources than most applications need. Docker Version123456789101112131415161718192021222324252627282930313233343536$ docker --versionDocker version 18.06.1-ce, build e68fc7a$ docker versionClient: Docker Engine - Community Version: 18.09.1 API version: 1.39 Go version: go1.10.6 Git commit: 4c52b90 Built: Wed Jan 9 19:33:12 2019 OS/Arch: darwin/amd64 Experimental: falseServer: Docker Engine - Community Engine: Version: 18.09.1 API version: 1.39 (minimum version 1.12) Go version: go1.10.6 Git commit: 4c52b90 Built: Wed Jan 9 19:41:49 2019 OS/Arch: linux/amd64 Experimental: true$ docker-compose --versiondocker-compose version 1.22.0, build f46880f$ docker-machine --versiondocker-machine version 0.15.0, build b48dc28d$ docker infoContainers: 9 Running: 2 Paused: 0 Stopped: 7Images: 74Server Version: 18.06.1-ce docker CLI: build – builds an image from a Dockerfile images – lists all local images pull – pulls an image from docker hub create – create a container from an image ps – list running containers (parameter -a also lists stopped containers) start / stop – start or stop a container docker run [OPTIONS] IMAGE [COMMAND][arg…]: Run a command in a new container docker exec [OPTIONS] CONTAINER COMMAND [ARG…]: Run a command in a running container Test run Nginx web server12345678910$ docker pull nginx$ docker run -d -p 80:80 --name webserver nginx$ docker ps$ docker exec -it webserver bash$ docker stop webserver$ docker rm webserver Recap and cheat sheet1234567891011121314151617181920212223242526272829## List Docker CLI commandsdockerdocker container --help## Display Docker version and infodocker --versiondocker versiondocker info## Execute Docker imagedocker run hello-world## List Docker imagesdocker image lsdocker image ls ubuntudocker image ls -f label=com.example.version=0.1docker image ls -qdocker image ls --format "&#123;&#123;.ID&#125;&#125;: &#123;&#123;.Repository&#125;&#125;"docker image ls --format "table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Repository&#125;&#125;\t&#123;&#123;.Tag&#125;&#125;"## List Docker containers (running, all, all in quiet mode)docker container lsdocker container ls --alldocker container ls -aq## Size of imagesdocker system df## clean docker image and containerdocker system prune -a Dockerfile Best practices for writing Dockerfiles Overview of Docker Compose 12FROM nginxRUN echo '&lt;h1&gt;Hello, Docker!&lt;/h1&gt;' &gt; /usr/share/nginx/html/index.html 123456789101112131415161718192021docker build -t friendlyhello . # Create image using this directory's Dockerfiledocker run -p 4000:80 friendlyhello # Run "friendlyhello" mapping port 4000 to 80docker run -d -p 4000:80 friendlyhello # Same thing, but in detached modedocker run --name &lt;your-new-container-name&gt; -p 8081:8080 jenkins:1.651.2 # same effect as the docker create and docker startdocker container ls # List all running containersdocker container ls -a # List all containers, even those not runningdocker container stop &lt;hash&gt; # Gracefully stop the specified containerdocker container kill &lt;hash&gt; # Force shutdown of the specified containerdocker container rm &lt;hash&gt; # Remove specified container from this machinedocker container rm $(docker container ls -a -q) # Remove all containersdocker psdocker exec -it jenkins-tutorials bashdocker exec -i -t container_name /bin/bashdocker exec -ti my_container sh -c "echo a &amp;&amp; echo b"docker image ls -a # List all images on this machinedocker image rm &lt;image id&gt; # Remove specified image from this machinedocker image rm $(docker image ls -a -q) # Remove all images from this machinedocker login # Log in this CLI session using your Docker credentialsdocker tag &lt;image&gt; username/repository:tag # Tag &lt;image&gt; for upload to registrydocker push username/repository:tag # Upload tagged image to registrydocker run username/repository:tag # Run image from a registry 123456789101112docker run \ --rm \ --name jenkins-tutorials \ -u root \ -p 9000:8080 \ -v jenkins-data:/var/jenkins_home \ -v /var/run/docker.sock:/var/run/docker.sock \ -v "$HOME":/home \ jenkinsci/blueoceandocker exec -it jenkins-tutorials bash Docker Compose12345678docker stack ls # List stacks or appsdocker stack deploy -c &lt;composefile&gt; &lt;appname&gt; # Run the specified Compose filedocker service ls # List running services associated with an appdocker service ps &lt;service&gt; # List tasks associated with an appdocker inspect &lt;task or container&gt; # Inspect task or containerdocker container ls -q # List container IDsdocker stack rm &lt;appname&gt; # Tear down an applicationdocker swarm leave --force # Take down a single node swarm from the manager RUN 执行命令 shell 格式: RUN &lt;命令&gt;，就像直接在命令行中输入的命令一样 RUN echo &#39;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&#39; &gt; /usr/share/nginx/html/index.html exec 格式：RUN [“可执行文件”, “参数 1”, “参数 2”]，这更像是函数调用中的格式 为了减少镜像层数推荐写法如下： 1234567891011121314FROM debian:jessieRUN buildDeps='gcc libc6-dev make' \ &amp;&amp; apt-get update \ &amp;&amp; apt-get install -y $buildDeps \ &amp;&amp; wget -O redis.tar.gz "http://download.redis.io/releases/redis-3.2.5.tar.gz" \ &amp;&amp; mkdir -p /usr/src/redis \ &amp;&amp; tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \ &amp;&amp; make -C /usr/src/redis \ &amp;&amp; make -C /usr/src/redis install \ &amp;&amp; rm -rf /var/lib/apt/lists/* \ &amp;&amp; rm redis.tar.gz \ &amp;&amp; rm -r /usr/src/redis \ &amp;&amp; apt-get purge -y --auto-remove $buildDeps Dockerfile 指令详解 Build 镜像12345678910docker build -t nginx:v3# Dockerfiledocker build --rm -f "Dockerfile" -t sample-app:latest# 直接用 Git repo 进行构建docker build https://github.com/twang2218/gitlab-ce-zh.git#:8.14# 用给定的 tar 压缩包构建docker build http://server/context.tar.gz Run Image1docker run --rm -d -p 5000:5000/tcp sample-app:latest Reference Get Started, Part 1: Orientation and setup Docker overview Docker Docker 简介 Docker and friends Cheat Sheet]]></content>
      <categories>
        <category>技(Skill)</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>cookbook</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[grunt]]></title>
    <url>%2F2018%2F08%2F17%2Fgrunt%2F</url>
    <content type="text"><![CDATA[Grunt 介绍grunt 是一个基于 nodejs 的 task runner，简单来说，就是类似于.net 平台的 msbuild 以及 java 平台的 maven。 Grunt 中文主页 是一套前端自动化构建工具，一个基于 nodeJs 的命令行工具 它是一个任务运行器, 配合其丰富强大的插件(Grunt 是一个任务插件框架) 常用功能: 合并文件(js/css) 压缩文件(js/css) 语法检查(js) less/sass 预编译处理 其它… grunt 可以使你的项目中重复的任务，比如压缩，语法检查，编译（比如 LESS 预处理，coffeescript 编译），单元测试等变得更加简单。 Project 实例结构: 123456789101112131415161718|- build----------构建生成的文件所在的文件夹|- src------------源码文件夹 |- js---------------js源文件夹 |- css--------------css源文件夹|- index.html-----页面文件|- Gruntfile.js---grunt配置文件(注意首字母大写)|- package.json---项目包配置文件 &#123; &quot;name&quot;: &quot;grunt_test&quot;, &quot;version&quot;: &quot;1.0.0&quot; &quot;devDependencies&quot;: &#123; &quot;grunt&quot;: &quot;^1.0.3&quot;, &quot;grunt-contrib-clean&quot;: &quot;^1.1.0&quot;, &quot;grunt-contrib-copy&quot;: &quot;^1.0.0&quot;, &quot;grunt-contrib-cssmin&quot;: &quot;^2.2.1&quot;, &quot;grunt-contrib-uglify&quot;: &quot;^3.2.1&quot; &#125; &#125; Grunt 安装因为 grunt 是基于 node.js 的，所以我们首先要安装 node.js 以及 node.js 的包管理工具 npm。 Windows Windows 平台下只要在 NODE.JS 官方下载 MSI 安装包，直接安装，node.js 以及 npm 就能直接装好。查看版本: 12node -vnpm -v 全局安装 grunt-cli 1npm install -g grunt-cli 安装 grunt 12345npm init //init package.jsonnpm install grunt --save-dev//批量installnpm install --save-dev grunt-contrib-concat grunt-contrib-jshint grunt-contrib-sass grunt-contrib-uglify grunt-contrib-watch grunt-contrib-connect 运行构建项目命令 1grunt //Warning: Task "default" not found Linux 123sudo apt-get -y install npmsudo npm install -g gruntsudo npm install -g grunt-cli package.jsonpackage.json 用来存放项目的元数据，比如项目的版本，项目许可证书——比如 MIT，GPL 啥的，作者，项目依赖的库等： 123456789101112131415161718192021&#123; "name": "ui", "version": "1.0.0", "description": "", "main": "ui.min.js", "directories": &#123; "doc": "doc" &#125;, "scripts": &#123; "test": "echo \"Error: no test specified\" &amp;&amp; exit 1" &#125;, "repository": "", "keywords": ["javascript", "ui", ""], "author": "", "license": "BSD", "devDependencies": &#123; "grunt": "~0.4.1", "grunt-jsdoc": "~0.4.0", "grunt-contrib-copy": "~0.4.1" &#125;&#125; note: npm init //init package.json 配置文件: Gruntfile.js 此配置文件本质就是一个 node 函数类型模块 配置编码包含 3 步: 初始化插件配置（grunt.initConfig） 加载插件任务(grunt.loadNpmTasks) 注册构建任务(grunt.registerTask)1234567smodule.exports = function(grunt) &#123; grunt.initConfig(&#123; //主要编码处 &#125;); grunt.loadNpmTasks('grunt-contrib-concat'); grunt.registerTask('default', []);&#125;; 命令: grunt TASK:TARGET grunt = grunt default Tips： 通过&lt;%%&gt;模板字符串可以引用任何的配置属性, 比如&lt;%=pkg.name%&gt;;也可以运行 grunt api, 比如&lt;%= grunt.template.today(“yyyy-mm-dd”) %&gt;。12345678910111213141516module.exports = function(grunt) &#123; grunt.initConfig(&#123; pkg: grunt.file.readJSON('package.json'), uglify: &#123; options: &#123; banner: '/*! &lt;%= pkg.name %&gt; &lt;%= grunt.template.today("yyyy-mm-dd") %&gt; */\n' &#125;, build: &#123; src: 'src/&lt;%= pkg.name %&gt;.js', dest: 'build/&lt;%= pkg.name %&gt;.min.js' &#125; &#125; &#125;); grunt.loadNpmTasks('grunt-jsdoc');&#125;; Grunt 插件介绍 Grunt 官网的插件列表页面 插件分类: Grunt 团队贡献的插件 : 插件名大都以 contrib-开头e.g. grunt-contrib-clean, grunt-contrib-concat, grunt-contrib-uglify… 第三方提供的插件 : 大都不以 contrib-开头 常用的插件: grunt-contrib-clean 清除文件(打包处理生成的) grunt-contrib-concat 合并多个文件的代码到一个文件中 grunt-contrib-uglify 压缩 js 文件 grunt-contrib-jshint javascript 语法错误检查； grunt-contrib-cssmin 压缩/合并 css 文件 grunt-contrib-htmlmin 压缩 html 文件 grunt-contrib-imagemin 压缩图片文件(无损) grunt-contrib-copy 复制文件、文件夹 grunt-contrib-requirejs 合并压缩 requirejs 管理的所有 js 模块文件 grunt-contrib-watch 实时监控文件变化、调用相应的任务重新执行 合并 js: 使用 concat 插件 安装插件 1npm install grunt-contrib-concat --save-dev 实例编码: src/js/test1.js 123456(function() &#123; function add(num1, num2) &#123; return num1 + num2; &#125; console.log(add(10, 20));&#125;)(); src/js/test2.js 123456(function() &#123; var arr = [2, 3, 4].map(function(item, index) &#123; return item + 1; &#125;); console.log(arr);&#125;)(); 配置: Gruntfile.js 配置任务: 123456789concat: &#123; options: &#123; //可选项配置 separator: &apos;;&apos; //使用;连接合并 &#125;, build: &#123; //此名称任意, target的名字，调用的时候为concat：build src: [&quot;src/js/*.js&quot;], //合并哪些js文件 dest: &quot;build/js/built.js&quot; //输出的js文件 &#125;&#125; 加载插件: 1grunt.loadNpmTasks('grunt-contrib-concat'); 注册任务: 1grunt.registerTask('default', ['concat']); 运行命令: 1grunt or grunt default Creating tasks Alias Tasks 1234grunt.registerTask(taskName, [description, ] taskList)//e.g.grunt.registerTask('default', ['jshint', 'qunit', 'concat', 'uglify']); Multi Tasks 1234567891011121314grunt.registerMultiTask(taskName, [description, ] taskFunction)//e.g.grunt.initConfig(&#123; log: &#123; foo: [1, 2, 3], bar: 'hello world', baz: false &#125;&#125;);grunt.registerMultiTask('log', 'Log stuff.', function() &#123; grunt.log.writeln(this.target + ': ' + this.data);&#125;); “Basic” Tasks 12345678910grunt.registerTask(taskName, [description, ] taskFunction)//e.g.grunt.registerTask('foo', 'A sample task that logs stuff.', function(arg1, arg2) &#123; if (arguments.length === 0) &#123; grunt.log.writeln(this.name + ", no args"); &#125; else &#123; grunt.log.writeln(this.name + ", " + arg1 + " " + arg2); &#125;&#125;); note: Inside a task, you can run other tasks. 123456grunt.registerTask('foo', 'My "foo" task.', function() &#123; // Enqueue "bar" and "baz" tasks, to run after "foo" finishes, in-order. grunt.task.run('bar', 'baz'); // Or: grunt.task.run(['bar', 'baz']);&#125;); 快速搭建脚手架利用 grunt 快速搭建脚手架出来。所谓的脚手架，就是指包含了目录结构和初始的一些功能,测试文件的一个环境。我们来搭建一个 jquery 插件的脚手架： 1grunt init:jquery 测试： 123grunt qunitgrunt lintgrunt watch Grunt 的设计原理个人理解Grunt 其实就是一个 singleton 的对象。框架提供了 task 注册和运行的功能。像项目管理一样，收集任务，编排任务，并规定执行顺序。 grunt.initConfig 是全局设置，配置 task 的执行参数或 context。 使用&lt;% %&gt;分隔符指定的模板会在任务从它们的配置中读取相应的数据时将自动扩展扫描。模板会被递归的展开，直到配置中不再存在遗留的模板相关的信息(与模板匹配的)。 12345678910111213grunt.initConfig(&#123; pkg: grunt.file.readJSON('package.json'), uglify: &#123; options: &#123; banner: '/*! &lt;%= pkg.name %&gt; &lt;%= grunt.template.today("yyyy-mm-dd") %&gt; */\n' &#125;, dist: &#123; src: 'src/&lt;%= pkg.name %&gt;.js', dest: 'dist/&lt;%= pkg.name %&gt;.min.js' &#125; &#125;&#125;); 全局 Grunt 注册 task 信息。 grunt.loadTasks(&#39;tasks&#39;), ‘tasks’是文件夹名，通过 node module 批量注册任务。 12345'use strict';module.exports = function(grunt) &#123; grunt.initConfig(&#123;&#125;); grunt.registerTask('test', ['clean', 'ui5_build', 'nodeunit']);&#125;; node module 中 通过 API grunt.registerTask or registerMultiTask, 注册 task 信息。 grunt.loadNpmTasks, 加载注册 grunt plugin，别人设计的 task。 Grunt plugin利用 Grunt 脚手架，快速创建贴合自己需要的项目需要的，项目内部可重用的 plugin。d参考Grunt 项目脚手架 采用模板 grunt-init-gruntplugin - Create a Grunt plugin, including Nodeunit unit tests grunt-init-gruntplugin-sample Debug Grunt in VSCodeVSCode 基于 NodeJS 构建，天生支持 JS 的调试，而 Grunt 又是 js 的，所以，可以调试。 123456789101112131415161718&#123; // Use IntelliSense to learn about possible attributes. // Hover to view descriptions of existing attributes. // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387 "version": "0.2.0", "configurations": [ &#123; "type": "node", "request": "launch", "name": "Launch Grunt", // "program": "$&#123;workspaceFolder&#125;\\node_modules\\@sap\\approuter\\approuter.js" "program": "$&#123;env:APPDATA&#125;\\npm\\node_modules\\grunt-cli\\bin\\grunt", "args": ["testBuild"], "stopOnEntry": true, "cwd": "$&#123;workspaceRoot&#125;" &#125; ]&#125;]]></content>
      <categories>
        <category>技(Skill)</category>
      </categories>
      <tags>
        <tag>grunt</tag>
        <tag>task runner</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nodejs-script]]></title>
    <url>%2F2018%2F08%2F07%2Fnodejs-script%2F</url>
    <content type="text"><![CDATA[可执行脚本使用 Nodejs 写执行脚本 12$ which node/usr/local/bin/node ./hello.sh 12#! /usr/local/bin/nodeconsole.log('hello world'); 12$ ./hello.shhello world 命令行参数./hello.sh 12#! /usr/local/bin/nodeconsole.log('hello ', process.argv[2]); 12$ ./hello.sh Abelhello Abel shelljs shelljs 模块重新包装了 child_process，调用系统命令更加方便。它需要安装后使用。 yargs shelljs 只解决了如何调用 shell 命令，而 yargs 模块能够解决如何处理命令行参数。它也需要安装。 参考 Node.js 命令行程序开发教程]]></content>
      <categories>
        <category>技(Skill)</category>
      </categories>
      <tags>
        <tag>shell</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VSCode Prettier ESLint 打造JavaScript开发利器]]></title>
    <url>%2F2018%2F08%2F02%2Fvscode-prettier-eslint%2F</url>
    <content type="text"><![CDATA[Terms VSCode 全称Visual Studio Code 非常好用的文本编辑器，参考 Visual Studio Code(VSCode) Basic 快速上手。 ESLint Code linting, cstatic analysis 代码静态分析工具，帮你发现 code quality errors，并且提供了 syntax format violations。 Prettier Prettier is an opinionated code formatter Prettier supports JavaScript, Flow, TypeScript, CSS, SCSS, Less, JSX, Vue, GraphQL, JSON, Markdown, YAML. In short, ESLint is the de facto for static analysis and Prettier has quickly become the go-to tool for formatting code. Install Extensions Prettier formatter for Visual Studio Code install Prettier - Code formatter Prettier extension, then vscode format document will be replaced by Prettier. User settings Testing as below settings: 1234567&#123; "editor.formatOnSave": false, "[javascript]": &#123; "editor.formatOnSave": true &#125;, "prettier.singleQuote": true&#125; VS Code ESLint extension 关于 ESLint 我会在写一篇 blog 介绍。这里只要支持提供一个.eslintrc规则配置文件在项目目录一下就好了, ESLint 插件就可以根据做它静态代码检查了。 Sync Settings 参考 VSCode Extension Settings-Sync(VSCode设置同步) 在项目成员间同步设置。 理论上如上内容在项目开始时搭建好，大家遵守如上设置，已经能很好的解决代码统一格式化和代码质量静态检查。但从更严谨的角度，这还不够。思考如下问题： 项目中期后期才开始严格统一代码格式，如何批量格式化代码。 如果成员没有按照统一设置，或者改了自己的设置怎么办，我们在 Jenkins 应该提供 step 来检查，像 eslint 一样。 后续内容可以帮助你更好的解决这些问题。 ESLint Plugin PrettierSee eslint-plugin-prettier for more. npm install --save-dev eslint $ npm install --save-dev prettier or npm install --global prettier $ npm i --save-dev eslint-plugin-prettier eslint-config-prettier .eslintrc 1234567891011&#123; "extends": ["inherit/src-config", "plugin:prettier/recommended"], "rules": &#123; "prettier/prettier": [ "error", &#123; "singleQuote": true &#125; ] &#125;&#125; 这里的设置要与 VSCode 中 Prettier 的设置保持一致。当然也可以单独提供一个 Prettier 配置文件，就像.eslintrc文件，这样可以保持 VSCode 编辑器也会用这些 rules。但是我们的前端工程不是都放在一个 repo 中的，会有很多 repo。Prettier 没有提供继承功能像 ESLint 那样，所以这种情况，我推荐此方法。 package.json 1234567"scripts": &#123; "format": "./node_modules/.bin/prettier --write 'webapp/**/*.&#123;json,css,less,md,yml&#125;' &amp; ./node_modules/.bin/eslint --fix 'webapp/**/*.js'", "format-prettier": "node_modules/.bin/prettier --write \"webapp/**/*.&#123;json,css,less,md,yml&#125;\"", "format-eslint": "node_modules/.bin/eslint --fix \"webapp/**/*.js\"", "lint-js": "./node_modules/.bin/eslint 'webapp/**/*.js'", "rule-conflict-check": "./node_modules/.bin/eslint --print-config .eslintrc | eslint-config-prettier-check"&#125;, 如上提供 npm stripts 提供了批量文件格式化；也提供了 Jenkins 可以调用的命令；rule-conflict-check可以帮你检查当前 ESLint 和 Prettier 关于格式化的 rule configuraiton 冲突，保持一个原则，格式化的 rules 交个 Prettier，ESLint 只要代码质量分析的 rules 设置就好了。 VSCode User Settings 12345678&#123; "editor.formatOnSave": true, "[javascript]": &#123; "editor.formatOnSave": false &#125;, "eslint.autoFixOnSave": true, "eslint.alwaysShowStatus": true&#125; 这里设置了保存的时候自动格式化文件，但是除了 JS 文件，JS 用 esLint --fix 来完成格式化，确保用的是 eslint 中的 rules，而不是 VSCode 中的设置。 Reference configure-prettier-and-eslint-in-visual-studio-code/]]></content>
      <categories>
        <category>器(Tool)</category>
      </categories>
      <tags>
        <tag>vscode</tag>
        <tag>prettier</tag>
        <tag>eslint</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VSCode Snippet]]></title>
    <url>%2F2018%2F08%2F02%2Fvscode-snippet%2F</url>
    <content type="text"><![CDATA[VSCode Snippetsnippet[ˈsnɪpɪt]，或者说「code snippet」，指的是能够帮助输入重复代码模式串，比如循环或条件语句，的模板。通过 snippet ，我们仅仅输入一小段代码就可以生成预定义的模板代码，甚至可以通过内部跳转快速补全模板。 Creating your own snippets snippet generator User Settings12"editor.snippetSuggestions": "top","editor.tabCompletion": true 如上设置确保你 tab 键会触发 snippet。]]></content>
      <categories>
        <category>器(Tool)</category>
      </categories>
      <tags>
        <tag>guide</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VSCode Keyboard Shortcuts Mac]]></title>
    <url>%2F2018%2F08%2F02%2Fvscode-keyboard-shortcut%2F</url>
    <content type="text"><![CDATA[全局Command + Shift + P / F1 显示命令面板. Command + P 快速打开 Command + Shift + N 打开新窗口 Command + W 关闭窗口 基本Command + X 剪切（未选中文本的情况下，剪切光标所在行） Command + C 复制（未选中文本的情况下，复制光标所在行） Option + Up 向上移动行. Option + Down 向下移动行. Option + Shift + Up 向上复制行. Option + Shift + Down 向下复制行. Command + Shift + K 删除行. Command + Enter 下一行插入 Command + Shift + Enter 上一行插入. Command + Shift + \ 跳转到匹配的括号 Command + [ 减少缩进. Command + ] 增加缩进. Home 跳转至行首 End 跳转到行尾 Command + Up 跳转至文件开头 Command + Down 跳转至文件结尾 Ctrl + PgUp 按行向上滚动 Ctrl + PgDown 按行向下滚动 Command + PgUp 按屏向上滚动 Command + PgDown 按屏向下滚动 Command + Shift + [ 折叠代码块 Command + Shift + ] 展开代码块 Command + K Command + [ 折叠全部子代码块 Command + K Command + ] 展开全部子代码块 Command + K Command + 0 折叠全部代码块 Command + K Command + J 展开全部代码块 Command + K Command + C 添加行注释 Command + K Command + U 移除行注释 Command + / 添加、移除行注释 Option + Shift + A 添加、移除块注释. Option + Z 自动换行、取消自动换行 多光标与选择Option + 点击 插入多个光标. Command + Option + Up 向上插入光标. Command + Option + Down 向下插入光标. Command + U 撤销上一个光标操作. Command + D 选中下一个相同内容插入光标. Option + Shift + I 在所选行的行尾插入光标 Command + I 选中当前行. Command + Shift + L 选中所有与当前选中内容相同部分. Command + F2 选中所有与当前选中单词相同的单词 Command + Ctrl + Shift + Left 折叠选中 Command + Ctrl + Shift + Right 展开选中 Alt + Shift + 拖动鼠标 选中代码块 Command + Shift + Option + Up 列选择 向上 Command + Shift + Option + Down 列选择 向下 Command + Shift + Option + Left 列选择 向左 Command + Shift + Option + Right 列选择 向右 Command + Shift + Option + PgUp 列选择 向上翻页 Command + Shift + Option + PgDown 列选择 向下翻页 查找替换Command + F 查找 Command + Option + F 替换 Command + G 查找下一个 Command + Shift + G 查找上一个 Option + Enter 选中所有匹配项 Command + D 向下选中相同内容 Command + K Command + D 移除前一个向下选中相同内容 进阶Ctrl + Space 打开建议 Command + Shift + Space 参数提示 Tab Emmet 插件缩写补全 Option + Shift + F 格式化 Command + K Command + F 格式化选中内容 F12 跳转到声明位置 Option + F12 查看具体声明内容 Command + K F12 分屏查看具体声明内容 Command + . 快速修复. Shift + F12 显示引用 F2 重命名符号Command + Shift + . 替换为上一个值 Command + Shift + , 替换为下一个值 Command + K Command + X 删除行尾多余空格 Command + K M 更改文件语言 导航Command + T 显示所有符号 Ctrl + G 跳转至某行 Command + P 跳转到某个文件 Command + Shift + O 跳转到某个符号 Command + Shift + M 打开问题面板 F8 下一个错误或警告位置 Shift + F8 上一个错误或警告位置 Ctrl + Shift + Tab 编辑器历史记录 Ctrl + - 后退 Ctrl + Shift + - 前进 Ctrl + Shift + M Tab 切换焦点 编辑器管理Command + W 关闭编辑器 Command + K F 关闭文件夹 Command + \ 编辑器分屏 Command + 1 切换到第一分组 Command + 2 切换到第二分组 Command + 3 切换到第三分组 Command + K Command + Left 切换到上一分组 Command + K Command + Right 切换到下一分组 Command + K Command + Shift + Left 左移编辑器 Command + K Command + Shift + Right 右移编辑器 Command + K Left 激活左侧编辑组 Command + K Right 激活右侧编辑组 文件管理Command + N 新建文件 Command + O 打开文件 Command + S 保存文件 Command + Shift + S 另存为 Command + Option + S 全部保存 Command + W 关闭 Command + KCommand + W 全部关闭 Command + Shift + T 重新打开被关闭的编辑器 Command + K Enter 保持打开 Ctrl + Tab 打开下一个 Ctrl + Shift + Tab 打开上一个 Command + K P 复制当前文件路径 Command + K R 在资源管理器中查看当前文件 Command + K O 新窗口打开当前文件 显示Command + Ctrl + F 全屏、退出全屏 Command + Option + 1 切换编辑器分屏方式（横、竖） Command + + 放大 Command + - 缩小 Command + B 显示、隐藏侧边栏 Command + Shift + E 显示资源管理器 或 切换焦点 Command + Shift + F 显示搜索框 Ctrl + Shift + G 显示 Git 面板 Command + Shift + D 显示调试面板 Command + Shift + X 显示插件面板 Command + Shift + H 全局搜索替换 Command + Shift + J 显示、隐藏高级搜索 Command + Shift + C 打开新终端 Command + Shift + U 显示输出面板 Command + Shift + V Markdown 预览窗口 Command + K V 分屏显示 Markdown 预览窗口 调试F9 设置 或 取消断点 F5 开始 或 继续 F11 进入 Shift + F11 跳出 F10 跳过 Command + K Command + I 显示悬停信息 集成终端Ctrl + ` 显示终端 Ctrl + Shift + ` 新建终端 Command + Up 向上滚动 Command + Down 向下滚动 PgUp 向上翻页 PgDown 向下翻页 Command + Home 滚动到顶部 Command + End 滚动到底部]]></content>
      <categories>
        <category>器(Tool)</category>
      </categories>
      <tags>
        <tag>vscode</tag>
        <tag>shortcut</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown Cookbook（Markdwon简明语法手册）]]></title>
    <url>%2F2018%2F08%2F01%2Fmarkdown-cookbook%2F</url>
    <content type="text"><![CDATA[Markdown? Markdown is a text-to-HTML conversion tool for web writers. Markdown allows you to write using an easy-to-read, easy-to-write plain text format, then convert it to structurally valid XHTML (or HTML). Markdown 简明语法如下内容让你快速掌握 Markdown 语法，忘记了快速参考。 GitHub Help - Basic writing and formatting syntax GitHub Mastering Markdown 如下在线 Markdown 编辑器，提供了更多扩展功能。 作业部落旗下在线编辑器 - Cmd Markdown 简明语法手册 作业部落旗下 Cmd Markdown - 功能预览 Markdown Editor(Markdown 编辑器)借力 VSCode 打造非常好用的 Markdown 本地编辑器。请参考VSCode Markdown Editor（VSCode打造好用的Markdown编辑器）]]></content>
      <categories>
        <category>器(Tool)</category>
      </categories>
      <tags>
        <tag>cookbook</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VSCode Extension Settings-Sync(VSCode设置同步)]]></title>
    <url>%2F2018%2F07%2F31%2Fvsocde-ext-settings-sync%2F</url>
    <content type="text"><![CDATA[团队合作中，你肯定想让每个人开发环境设置是一样的，起码基础设置是一样的。Settings Sync 满足你的需求，让新加入的成员快速搭建相同的开发环境。 对于个人而言我也希望我在做不同场景的事情的时候使用不用的配置。如纯写 markdown 的时候，写个人 Blog 的时候，或者做前端开发的时候，可能每种场景用的插件和做的设置是不一样的，有些插件又有冲突。也做为我使用该插件的情况。 Settings SyncGeneral Settings Sync, 官方文档描述的很清楚 Visual Studio Code Settings Sync Configurations 作者个人 Blog 更详细的说明 Configuration 部分 个人感觉如下内容你要理解： About gists, Public and Secret Gist. Gist Settings 同步内容的 gist-id，只有第一次操作的时候需要填写，之后就会记录到你的设置中sync.gist。 Open the command palette: Ctrl+Shift+P (Cmd+Shift+P on Mac), 输入 open user settings. 123456789101112"sync.gist": "d9ac5f7d193ffeeec7d8459451b2217a","sync.host": "","sync.pathPrefix": "","sync.quietSync": false,"sync.askGistName": false,"sync.removeExtensions": true,"sync.syncExtensions": true,"sync.autoDownload": false,"sync.autoUpload": false,"sync.lastUpload": "2018-07-31T07:03:09.646Z","sync.lastDownload": "","sync.forceDownload": false, Global Settings 这里的 token 就是类似你的密码，想要 update / upload settings 必须要有这个，可以 GitHub 中手动重新生成。 Open the command palette: Ctrl+Shift+P (Cmd+Shift+P on Mac), 输入 Sync Advanced Options. 选择Edit Extension Local Settings 12345678910111213141516171819&#123; "ignoreUploadFiles": [ "projects.json", "projects_cache_vscode.json", "projects_cache_git.json", "projects_cache_svn.json", "gpm_projects.json", "gpm-recentItems.json" ], "ignoreUploadFolders": ["workspaceStorage"], "ignoreExtensions": [], "replaceCodeSettings": &#123;&#125;, "gistDescription": "Visual Studio Code Settings Sync Gist", "version": 300, "token": "e8f1678289913259c10ca55c47f44405cffb17d7", "downloadPublicGist": false, "supportedFileExtensions": ["json", "code-snippets"], "openTokenLink": true&#125; 如果你像我一样不同场景有不同的 extensions 和不同的配置，需要切换的时候，就删除配置中的gist和token，又会提示你输入 gist 和 token 了，输入你对应的 gist 和 token ，重新同步就行了。 Install Settings Sync Open Visual Studio Code Press Ctrl+P to open the Quick Open dialog Type ext install Shan.code-settings-sync, then click enter after find the extesnion Click reload button after Installed Upload VSCode Settings Open the command palette: Ctrl+Shift+P (Cmd+Shift+P on Mac) sync: Update / upload settings, for first time, input gist-id Get Done information on OUTPUT Window Download VSCode Settigns Press ctrl+shift+P , then type sync: advance options to select sync: download from public gist, if secret gist, skip this step. Press ctrl+shift+P, then type sync: download settings, then input gist-id Get Done information on OUTPUT Window Reload VSCode Tips: 如果没显示 Done，就关闭 VSCode，反复尝试几次. Make gist Public from Secret如何你想分享的 Secret 给别人，但是别人只能读取，不能修改（当然你提供了 token 一样可以修改）。可以将你的 gist 从 Secret 改成 Public。 进入 gis 的详细页面，如gistT id e7a2c92023d52bb30d9db275e506d83d 点击edit修改 点击make public, then update secret gist. VSCode Settings个人 VSCode Settings 分享。 Markdown vscode-settings-markdown-syncGitHub Gist: 1df6c83597056cc7f97e641efb51b288GitHub Gist Type: Public]]></content>
      <categories>
        <category>器(Tool)</category>
      </categories>
      <tags>
        <tag>guide</tag>
        <tag>vscode</tag>
        <tag>sync</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo引用站内文章]]></title>
    <url>%2F2018%2F07%2F31%2Fhexo-tip-post-link%2F</url>
    <content type="text"><![CDATA[1&#123;% post_link 文章文件名（后缀省略） 文章标题（可选） %&#125; e.g. 12# 不需要 []()&#123;% post_link hello-world %&#125; Hello World]]></content>
      <categories>
        <category>术(Solution)</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>tips</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VSCode Markdown Editor（VSCode打造好用的Markdown编辑器）]]></title>
    <url>%2F2018%2F07%2F30%2Fvsocde-md%2F</url>
    <content type="text"><![CDATA[打造足够好用的 Markdown 编辑器，VSCode 的易用性就不用说了，再加上好用的 Extensions 插件，简直完美。 VSCode关于 VSCode 参考 Visual Studio Code(VSCode) Basic Markdown Extensions 推荐 Markdown Preview Enhanced 比 VSCode 原生预览强大很多 Markdown Preview Enhanced 是一款为 Atom 以及 Visual Studio Code 编辑器编写的超级强大的 Markdown 插件。 这款插件意在让你拥有飘逸的 Markdown 写作体验。 Open the command palette: Ctrl+Shift+P (Cmd+Shift+P on Mac), 输入 MPE 查看所有功能 右键预览可以查看更多功能 Paste Image 从此本地 Markdown 引入图片也变的如此简单。 截屏到剪切板 使用快捷键粘贴图片 Ctrl+Alt+V (Cmd+Alt+V on Mac). 按照配置图片会保存到对应的文件夹中，建议基于项目设置 workspace settings。 图片相对路径引用会自动生成 Prettier formatter for Visual Studio Code格式化工具，帮你格式化 Markdown. markdownlint 如果不用 Prettier，这是值得推荐的选项。 Markdown/CommonMark linting and style checking for Visual Studio Code Markdown All in One提供了快捷键 Markdown什么是 Markdown 请参考 Markdown Cookbook（Markdwon简明语法手册） Sync VSCode Settings 参考 VSCode Extension Settings-Sync(VSCode设置同步)]]></content>
      <categories>
        <category>器(Tool)</category>
      </categories>
      <tags>
        <tag>guide</tag>
        <tag>markdown</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Visual Studio Code(VSCode) Basic]]></title>
    <url>%2F2018%2F07%2F30%2Fvscode%2F</url>
    <content type="text"><![CDATA[体验了 Atom 和 Sublime，做为轻量级文本编辑器，个人还是比较喜欢 VS Code。如下内容足够你了解 VS Code，让轻轻松松上路。 Visual Studio Code Tips and Tricks]]></content>
      <categories>
        <category>器(Tool)</category>
      </categories>
      <tags>
        <tag>guide</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo写作Cookbook]]></title>
    <url>%2F2018%2F07%2F27%2Fhexo-writting-cookbook%2F</url>
    <content type="text"><![CDATA[此博文做为 Hexo 写作的 Cookbook，记录写作中常用内容，方便参考引用。 命令部署(Deployment)123hexo cleanhexo ghexo d 运行(Run)12hexo shexo s --draft 发布（Push）1hexo publish [layout] &lt;title&gt; 写作(Writting) Hexo 写作 123// hexo new [layout] &lt;tittle | file name&gt;hexo new post hello-world // path source/_postshexo new draft hello-world // path source/_drafts Front-matter 标签插件（Tag Plugins）Note1&#123;% note class_name %&#125; Content (md partial supported) &#123;% endnote %&#125; 其中，class_name 可以是以下列表中的一个值： default primary success info warning danger 123&#123;% note warning 不要处理我的文章 %&#125;如果你不想你的文章被处理，你可以将 Front-Matter 中的`layout:` 设为 `false` 。&#123;% endnote %&#125; 如果你不想你的文章被处理，你可以将 Front-Matter 中的layout: 设为 false 。 突破容器宽度限时的图片123456789&lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;&lt;!-- 其中 class=&quot;full-image&quot; 是必须的 --&gt;&lt;img src=&quot;/image-url&quot; class=&quot;full-image&quot; /&gt;&lt;!-- 标签 方式，要求版本在0.4.5或以上 --&gt;&#123;% fullimage /image-url, alt, title %&#125;&lt;!-- 别名 --&gt;&#123;% fi /image-url, alt, title %&#125; 引用(quote)引用书上的句子 123&#123;% blockquote David Levithan, Wide Awake %&#125;Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.&#123;% endblockquote %&#125; Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy. David LevithanWide Awake 引用网络上的文章 123&#123;% blockquote Seth Godin http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %&#125;Every interaction is both precious and an opportunity to delight.&#123;% endblockquote %&#125; Every interaction is both precious and an opportunity to delight. Seth GodinWelcome to Island Marketing]]></content>
      <categories>
        <category>器(Tool)</category>
      </categories>
      <tags>
        <tag>cookbook</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo Guide 新手知识]]></title>
    <url>%2F2018%2F07%2F27%2Fhexo-guide%2F</url>
    <content type="text"><![CDATA[具体怎么通过 Hexo 搭建个人博客，已经有很多很好的博文了。此文专注记录用 Hexo 写博文过程中遇到的问题和 tips。将持续更新！ Hexo 初解Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 Hexo官网hexo.io/zh-cn/docs Markdown: 轻量级标记语言, 是方便作者写博文，仅仅是内容。Markdown 渲染引擎让它如静态网页一样呈现。（原材料） Theme: 为了更好的互动，让博文更绚丽，有调理的呈现。（染料） Hexo：让 Markown 穿上 Theme 的衣服（渲染引擎），更好组织和交互。（作坊，生产线） Hexo整套思路是借鉴Jekyll，只是用NodeJS又实现了一次，个人感觉易用性更好了，性能也比Ruby实现的要好。 布局(Layout)刚接触 Hexo 的时候很让我感觉迷惑的两个 layout。一个是 scaffolds 中的 draft、page and post 的 md 文档，该博文中命名为Scaffolds Layout(是生成不同文档的脚手架模板)。Theme 中的 layout,才是真正的我们理解的 layout。该博文中命名为Theme Layout。 Scaffolds Layout: scaffolds 中的 draft、page and post 的 md 文档 Theme Layout: Theme 中的 layout, swig or ejs 文件 Scaffolds Layout1$ hexo new [layout] &lt;title&gt; 如上命令中的 layout，是指Scaffolds Layout。 预定义了post 、 page和draft markdown 文件做为脚手架模板，为了快速生成文档，如下是默认生成路径。如果在 scaffolds 增加自己的Scaffolds Layout，会生成文件到source/_posts文件夹。 Scaffolds Layout Path post source/_posts page source draft source/_drafts 如上默认Scaffolds Layout分别代表三种类别，这是Hexo程序逻辑控制的。 post: 博文 page: 单独HTML页面, 如Menu菜单中的tags, categories, about … draft: 临时博文 脚手架文档模板中Scaffolds Layout设置了什么？ 123456---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;tags:categories:--- 其实缺少了layout的设置，默认是post，可以通过修改 _config.yml 中的 default_layout 参数来指定默认布局。这才是Theme Layout。这是两者的关系。 Theme Layout themes文件中，对应theme的layout文件夹下面的文件。 可以通过修改Site _config.yml 中的 default_layout 参数来指定默认Theme Layout。 如果改变页面样子，应该在这里修改。 为了更好的重用，他们会extends或者嵌套另一个layout，看看page和tag layout关系就知道了。 为了足够动态控制，一定了标签和变量。 Categories and Tags Mapping Categories and Tags with Hexo在Hexo默认配置文件中_config.yml, 有两个配置项category_map和tag_map，主要是影响点击后的url路径。 如何增加Categories和Tags页面，解决404 error 1234567$ hexo new page tags$ hexo new page categories# 会生成 source/tags/index.md# 会生成 source/categories/index.md# 然后分别增加如下行，如果你是用Theme Next，其他可能加入对一个的layout# add line: type: "tags"# add line: type: "categories" Theme theme-next Markdown 表格(Table)不能正常展示发现Hexo默认采用插件hexo-renderer-marked做为markdown的渲染。我在表格前加个空格就不能正常渲染，去掉就可以了。 Markdown代码块语言 Language names and aliases Website Visiting Analyzes网站访问统计： Google webmasters 百度统计 Tips Hexo引用站内文章]]></content>
      <categories>
        <category>器(Tool)</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>guide</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F07%2F25%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Abel’s Blog! As a developer, we are always using “Hello World” as a start. From today, I would like to write down somthing here. Hope it’s helpful for myself. It will be better if it is also helpful for you. 突如其来有个想法，做个人博客，源于前几天两个词汇冒入脑中挥之不去，较真和蚂蚁。 蚂蚁(Ant)蚂蚁为典型的社会性群体。具有社会性的 3 大要素：同种个体间能相互合作照顾幼体；具明确的劳动分工；在蚁群内至少二个世代重叠（不排除个别情况），且子代能在一段时间内照顾上一代。 蚂蚁绝对是建筑专家，蚁巢内有许多分室，这些分室各有用处。蚁窝牢固、安全、舒服，道路四通八达，错综复杂。蚁窝外面还有一圈土，还有一些储备食物的地方，里面通风、凉快、冬暖夏凉，食物不易坏掉。 蚂蚁也是动物世界赫赫有名的建筑师。它们利用颚部在地下挖洞，通过一粒一粒搬运沙土，建造它们的蚁穴。蚁穴的“房间”将一直保持建造之初的形态，除非土壤严重干化。 较真儿可能自己就是这样一个人吧，在自己在意的方面。恰巧自己又是一个码农，希望在码农方面保持较真儿吧，虽然有些累。 综上，我博客的 slogan 就是有点较真儿的搬运工！！！]]></content>
      <categories>
        <category>悟(Tattle)</category>
      </categories>
      <tags>
        <tag>ant</tag>
        <tag>较真儿</tag>
      </tags>
  </entry>
</search>
