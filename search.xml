<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[VSCode Prettier ESLint 打造JavaScript开发利器]]></title>
    <url>%2F2018%2F08%2F02%2Fvscode-prettier-eslint%2F</url>
    <content type="text"><![CDATA[Terms VSCode 全称Visual Studio Code 非常好用的文本编辑器，参考 Visual Studio Code(VSCode) Basic 快速上手。 ESLint Code linting, cstatic analysis 代码静态分析工具，帮你发现 code quality errors，并且提供了 syntax format violations。 Prettier Prettier is an opinionated code formatter Prettier supports JavaScript, Flow, TypeScript, CSS, SCSS, Less, JSX, Vue, GraphQL, JSON, Markdown, YAML. In short, ESLint is the de facto for static analysis and Prettier has quickly become the go-to tool for formatting code. Install Extensions Prettier formatter for Visual Studio Code install Prettier - Code formatter Prettier extension, then vscode format document will be replaced by Prettier. User settings Testing as below settings: 1234567&#123; "editor.formatOnSave": false, "[javascript]": &#123; "editor.formatOnSave": true &#125;, "prettier.singleQuote": true&#125; VS Code ESLint extension 关于 ESLint 我会在写一篇 blog 介绍。这里只要支持提供一个.eslintrc规则配置文件在项目目录一下就好了, ESLint 插件就可以根据做它静态代码检查了。 Sync Settings 参考 VSCode Extension Settings-Sync(VSCode设置同步) 在项目成员间同步设置。 理论上如上内容在项目开始时搭建好，大家遵守如上设置，已经能很好的解决代码统一格式化和代码质量静态检查。但从更严谨的角度，这还不够。思考如下问题： 项目中期后期才开始严格统一代码格式，如何批量格式化代码。 如果成员没有按照统一设置，或者改了自己的设置怎么办，我们在 Jenkins 应该提供 step 来检查，像 eslint 一样。 后续内容可以帮助你更好的解决这些问题。 ESLint Plugin PrettierSee eslint-plugin-prettier for more. npm install --save-dev eslint $ npm install --save-dev prettier or npm install --global prettier $ npm i --save-dev eslint-plugin-prettier eslint-config-prettier .eslintrc 1234567891011&#123; "extends": ["inherit/src-config", "plugin:prettier/recommended"], "rules": &#123; "prettier/prettier": [ "error", &#123; "singleQuote": true &#125; ] &#125;&#125; 这里的设置要与 VSCode 中 Prettier 的设置保持一致。当然也可以单独提供一个 Prettier 配置文件，就像.eslintrc文件，这样可以保持 VSCode 编辑器也会用这些 rules。但是我们的前端工程不是都放在一个 repo 中的，会有很多 repo。Prettier 没有提供继承功能像 ESLint 那样，所以这种情况，我推荐此方法。 package.json 1234567"scripts": &#123; "format": "./node_modules/.bin/prettier --write 'webapp/**/*.&#123;json,css,less,md,yml&#125;' &amp; ./node_modules/.bin/eslint --fix 'webapp/**/*.js'", "format-prettier": "node_modules/.bin/prettier --write \"webapp/**/*.&#123;json,css,less,md,yml&#125;\"", "format-eslint": "node_modules/.bin/eslint --fix \"webapp/**/*.js\"", "lint-js": "./node_modules/.bin/eslint 'webapp/**/*.js'", "rule-conflict-check": "./node_modules/.bin/eslint --print-config .eslintrc | eslint-config-prettier-check"&#125;, 如上提供 npm stripts 提供了批量文件格式化；也提供了 Jenkins 可以调用的命令；rule-conflict-check可以帮你检查当前 ESLint 和 Prettier 关于格式化的 rule configuraiton 冲突，保持一个原则，格式化的 rules 交个 Prettier，ESLint 只要代码质量分析的 rules 设置就好了。 VSCode User Settings 12345678&#123; "editor.formatOnSave": true, "[javascript]": &#123; "editor.formatOnSave": false &#125;, "eslint.autoFixOnSave": true, "eslint.alwaysShowStatus": true&#125; 这里设置了保存的时候自动格式化文件，但是除了 JS 文件，JS 用 esLint --fix 来完成格式化，确保用的是 eslint 中的 rules，而不是 VSCode 中的设置。 Reference configure-prettier-and-eslint-in-visual-studio-code/]]></content>
      <categories>
        <category>器(Tool)</category>
      </categories>
      <tags>
        <tag>vscode</tag>
        <tag>prettier</tag>
        <tag>eslint</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VSCode Snippet]]></title>
    <url>%2F2018%2F08%2F02%2Fvscode-snippet%2F</url>
    <content type="text"><![CDATA[VSCode Snippetsnippet[ˈsnɪpɪt]，或者说「code snippet」，指的是能够帮助输入重复代码模式串，比如循环或条件语句，的模板。通过 snippet ，我们仅仅输入一小段代码就可以生成预定义的模板代码，甚至可以通过内部跳转快速补全模板。 Creating your own snippets snippet generator User Settings12"editor.snippetSuggestions": "top","editor.tabCompletion": true 如上设置确保你 tab 键会触发 snippet。]]></content>
      <categories>
        <category>器(Tool)</category>
      </categories>
      <tags>
        <tag>guide</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VSCode Keyboard Shortcuts Mac]]></title>
    <url>%2F2018%2F08%2F02%2Fvscode-keyboard-shortcut%2F</url>
    <content type="text"><![CDATA[全局Command + Shift + P / F1 显示命令面板. Command + P 快速打开 Command + Shift + N 打开新窗口 Command + W 关闭窗口 基本Command + X 剪切（未选中文本的情况下，剪切光标所在行） Command + C 复制（未选中文本的情况下，复制光标所在行） Option + Up 向上移动行. Option + Down 向下移动行. Option + Shift + Up 向上复制行. Option + Shift + Down 向下复制行. Command + Shift + K 删除行. Command + Enter 下一行插入 Command + Shift + Enter 上一行插入. Command + Shift + \ 跳转到匹配的括号 Command + [ 减少缩进. Command + ] 增加缩进. Home 跳转至行首 End 跳转到行尾 Command + Up 跳转至文件开头 Command + Down 跳转至文件结尾 Ctrl + PgUp 按行向上滚动 Ctrl + PgDown 按行向下滚动 Command + PgUp 按屏向上滚动 Command + PgDown 按屏向下滚动 Command + Shift + [ 折叠代码块 Command + Shift + ] 展开代码块 Command + K Command + [ 折叠全部子代码块 Command + K Command + ] 展开全部子代码块 Command + K Command + 0 折叠全部代码块 Command + K Command + J 展开全部代码块 Command + K Command + C 添加行注释 Command + K Command + U 移除行注释 Command + / 添加、移除行注释 Option + Shift + A 添加、移除块注释. Option + Z 自动换行、取消自动换行 多光标与选择Option + 点击 插入多个光标. Command + Option + Up 向上插入光标. Command + Option + Down 向下插入光标. Command + U 撤销上一个光标操作. Command + D 选中下一个相同内容插入光标. Option + Shift + I 在所选行的行尾插入光标 Command + I 选中当前行. Command + Shift + L 选中所有与当前选中内容相同部分. Command + F2 选中所有与当前选中单词相同的单词 Command + Ctrl + Shift + Left 折叠选中 Command + Ctrl + Shift + Right 展开选中 Alt + Shift + 拖动鼠标 选中代码块 Command + Shift + Option + Up 列选择 向上 Command + Shift + Option + Down 列选择 向下 Command + Shift + Option + Left 列选择 向左 Command + Shift + Option + Right 列选择 向右 Command + Shift + Option + PgUp 列选择 向上翻页 Command + Shift + Option + PgDown 列选择 向下翻页 查找替换Command + F 查找 Command + Option + F 替换 Command + G 查找下一个 Command + Shift + G 查找上一个 Option + Enter 选中所有匹配项 Command + D 向下选中相同内容 Command + K Command + D 移除前一个向下选中相同内容 进阶Ctrl + Space 打开建议 Command + Shift + Space 参数提示 Tab Emmet 插件缩写补全 Option + Shift + F 格式化 Command + K Command + F 格式化选中内容 F12 跳转到声明位置 Option + F12 查看具体声明内容 Command + K F12 分屏查看具体声明内容 Command + . 快速修复. Shift + F12 显示引用 F2 重命名符号Command + Shift + . 替换为上一个值 Command + Shift + , 替换为下一个值 Command + K Command + X 删除行尾多余空格 Command + K M 更改文件语言 导航Command + T 显示所有符号 Ctrl + G 跳转至某行 Command + P 跳转到某个文件 Command + Shift + O 跳转到某个符号 Command + Shift + M 打开问题面板 F8 下一个错误或警告位置 Shift + F8 上一个错误或警告位置 Ctrl + Shift + Tab 编辑器历史记录 Ctrl + - 后退 Ctrl + Shift + - 前进 Ctrl + Shift + M Tab 切换焦点 编辑器管理Command + W 关闭编辑器 Command + K F 关闭文件夹 Command + \ 编辑器分屏 Command + 1 切换到第一分组 Command + 2 切换到第二分组 Command + 3 切换到第三分组 Command + K Command + Left 切换到上一分组 Command + K Command + Right 切换到下一分组 Command + K Command + Shift + Left 左移编辑器 Command + K Command + Shift + Right 右移编辑器 Command + K Left 激活左侧编辑组 Command + K Right 激活右侧编辑组 文件管理Command + N 新建文件 Command + O 打开文件 Command + S 保存文件 Command + Shift + S 另存为 Command + Option + S 全部保存 Command + W 关闭 Command + KCommand + W 全部关闭 Command + Shift + T 重新打开被关闭的编辑器 Command + K Enter 保持打开 Ctrl + Tab 打开下一个 Ctrl + Shift + Tab 打开上一个 Command + K P 复制当前文件路径 Command + K R 在资源管理器中查看当前文件 Command + K O 新窗口打开当前文件 显示Command + Ctrl + F 全屏、退出全屏 Command + Option + 1 切换编辑器分屏方式（横、竖） Command + + 放大 Command + - 缩小 Command + B 显示、隐藏侧边栏 Command + Shift + E 显示资源管理器 或 切换焦点 Command + Shift + F 显示搜索框 Ctrl + Shift + G 显示 Git 面板 Command + Shift + D 显示调试面板 Command + Shift + X 显示插件面板 Command + Shift + H 全局搜索替换 Command + Shift + J 显示、隐藏高级搜索 Command + Shift + C 打开新终端 Command + Shift + U 显示输出面板 Command + Shift + V Markdown 预览窗口 Command + K V 分屏显示 Markdown 预览窗口 调试F9 设置 或 取消断点 F5 开始 或 继续 F11 进入 Shift + F11 跳出 F10 跳过 Command + K Command + I 显示悬停信息 集成终端Ctrl + ` 显示终端 Ctrl + Shift + ` 新建终端 Command + Up 向上滚动 Command + Down 向下滚动 PgUp 向上翻页 PgDown 向下翻页 Command + Home 滚动到顶部 Command + End 滚动到底部]]></content>
      <categories>
        <category>器(Tool)</category>
      </categories>
      <tags>
        <tag>vscode</tag>
        <tag>shortcut</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown Cookbook（Markdwon简明语法手册）]]></title>
    <url>%2F2018%2F08%2F01%2Fmarkdown-cookbook%2F</url>
    <content type="text"><![CDATA[Markdown? Markdown is a text-to-HTML conversion tool for web writers. Markdown allows you to write using an easy-to-read, easy-to-write plain text format, then convert it to structurally valid XHTML (or HTML). Markdown 简明语法如下内容让你快速掌握 Markdown 语法，忘记了快速参考。 GitHub Help - Basic writing and formatting syntax GitHub Mastering Markdown 如下在线 Markdown 编辑器，提供了更多扩展功能。 作业部落旗下在线编辑器 - Cmd Markdown 简明语法手册 作业部落旗下 Cmd Markdown - 功能预览 Markdown Editor(Markdown 编辑器)借力 VSCode 打造非常好用的 Markdown 本地编辑器。请参考VSCode Markdown Editor（VSCode打造好用的Markdown编辑器）]]></content>
      <categories>
        <category>器(Tool)</category>
      </categories>
      <tags>
        <tag>cookbook</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VSCode Extension Settings-Sync(VSCode设置同步)]]></title>
    <url>%2F2018%2F07%2F31%2Fvsocde-ext-settings-sync%2F</url>
    <content type="text"><![CDATA[团队合作中，你肯定想让每个人开发环境设置是一样的，起码基础设置是一样的。Settings Sync 满足你的需求，让新加入的成员快速搭建相同的开发环境。 对于个人而言我也希望我在做不同场景的事情的时候使用不用的配置。如纯写 markdown 的时候，写个人 Blog 的时候，或者做前端开发的时候，可能每种场景用的插件和做的设置是不一样的，有些插件又有冲突。也做为我使用该插件的情况。 Settings SyncGeneral Settings Sync, 官方文档描述的很清楚 Visual Studio Code Settings Sync Configurations 作者个人 Blog 更详细的说明 Configuration 部分 个人感觉如下内容你要理解： About gists, Public and Secret Gist. Gist Settings 同步内容的 gist-id，只有第一次操作的时候需要填写，之后就会记录到你的设置中sync.gist。 Open the command palette: Ctrl+Shift+P (Cmd+Shift+P on Mac), 输入 open user settings. 123456789101112"sync.gist": "d9ac5f7d193ffeeec7d8459451b2217a","sync.host": "","sync.pathPrefix": "","sync.quietSync": false,"sync.askGistName": false,"sync.removeExtensions": true,"sync.syncExtensions": true,"sync.autoDownload": false,"sync.autoUpload": false,"sync.lastUpload": "2018-07-31T07:03:09.646Z","sync.lastDownload": "","sync.forceDownload": false, Global Settings 这里的 token 就是类似你的密码，想要 update / upload settings 必须要有这个，可以 GitHub 中手动重新生成。 Open the command palette: Ctrl+Shift+P (Cmd+Shift+P on Mac), 输入 Sync Advanced Options. 选择Edit Extension Local Settings 12345678910111213141516171819&#123; "ignoreUploadFiles": [ "projects.json", "projects_cache_vscode.json", "projects_cache_git.json", "projects_cache_svn.json", "gpm_projects.json", "gpm-recentItems.json" ], "ignoreUploadFolders": ["workspaceStorage"], "ignoreExtensions": [], "replaceCodeSettings": &#123;&#125;, "gistDescription": "Visual Studio Code Settings Sync Gist", "version": 300, "token": "e8f1678289913259c10ca55c47f44405cffb17d7", "downloadPublicGist": false, "supportedFileExtensions": ["json", "code-snippets"], "openTokenLink": true&#125; 如果你像我一样不同场景有不同的 extensions 和不同的配置，需要切换的时候，就删除配置中的gist和token，又会提示你输入 gist 和 token 了，输入你对应的 gist 和 token ，重新同步就行了。 Install Settings Sync Open Visual Studio Code Press Ctrl+P to open the Quick Open dialog Type ext install Shan.code-settings-sync, then click enter after find the extesnion Click reload button after Installed Upload VSCode Settings Open the command palette: Ctrl+Shift+P (Cmd+Shift+P on Mac) sync: Update / upload settings, for first time, input gist-id Get Done information on OUTPUT Window Download VSCode Settigns Press ctrl+shift+P , then type sync: advance options to select sync: download from public gist, if secret gist, skip this step. Press ctrl+shift+P, then type sync: download settings, then input gist-id Get Done information on OUTPUT Window Reload VSCode Tips: 如果没显示 Done，就关闭 VSCode，反复尝试几次. Make gist Public from Secret如何你想分享的 Secret 给别人，但是别人只能读取，不能修改（当然你提供了 token 一样可以修改）。可以将你的 gist 从 Secret 改成 Public。 进入 gis 的详细页面，如gistT id e7a2c92023d52bb30d9db275e506d83d 点击edit修改 点击make public, then update secret gist. VSCode Settings个人 VSCode Settings 分享。 Markdown vscode-settings-markdown-syncGitHub Gist: 1df6c83597056cc7f97e641efb51b288GitHub Gist Type: Public]]></content>
      <categories>
        <category>器(Tool)</category>
      </categories>
      <tags>
        <tag>guide</tag>
        <tag>vscode</tag>
        <tag>sync</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo引用站内文章]]></title>
    <url>%2F2018%2F07%2F31%2Fhexo-tip-post-link%2F</url>
    <content type="text"><![CDATA[1&#123;% post_link 文章文件名（后缀省略） 文章标题（可选） %&#125; e.g. 12# 不需要 []()&#123;% post_link hello-world %&#125; Hello World]]></content>
      <categories>
        <category>术(Solution)</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>tips</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VSCode Markdown Editor（VSCode打造好用的Markdown编辑器）]]></title>
    <url>%2F2018%2F07%2F30%2Fvsocde-md%2F</url>
    <content type="text"><![CDATA[打造足够好用的 Markdown 编辑器，VSCode 的易用性就不用说了，再加上好用的 Extensions 插件，简直完美。 VSCode关于 VSCode 参考 Visual Studio Code(VSCode) Basic Markdown Extensions 推荐 Markdown Preview Enhanced 比 VSCode 原生预览强大很多 Markdown Preview Enhanced 是一款为 Atom 以及 Visual Studio Code 编辑器编写的超级强大的 Markdown 插件。 这款插件意在让你拥有飘逸的 Markdown 写作体验。 Open the command palette: Ctrl+Shift+P (Cmd+Shift+P on Mac), 输入 MPE 查看所有功能 右键预览可以查看更多功能 Paste Image 从此本地 Markdown 引入图片也变的如此简单。 截屏到剪切板 使用快捷键粘贴图片 Ctrl+Alt+V (Cmd+Alt+V on Mac). 按照配置图片会保存到对应的文件夹中，建议基于项目设置 workspace settings。 图片相对路径引用会自动生成 Prettier formatter for Visual Studio Code格式化工具，帮你格式化 Markdown. markdownlint 如果不用 Prettier，这是值得推荐的选项。 Markdown/CommonMark linting and style checking for Visual Studio Code Markdown All in One提供了快捷键 Markdown什么是 Markdown 请参考 Markdown Cookbook（Markdwon简明语法手册） Sync VSCode Settings 参考 VSCode Extension Settings-Sync(VSCode设置同步)]]></content>
      <categories>
        <category>器(Tool)</category>
      </categories>
      <tags>
        <tag>guide</tag>
        <tag>markdown</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Visual Studio Code(VSCode) Basic]]></title>
    <url>%2F2018%2F07%2F30%2Fvscode%2F</url>
    <content type="text"><![CDATA[体验了 Atom 和 Sublime，做为轻量级文本编辑器，个人还是比较喜欢 VS Code。如下内容足够你了解 VS Code，让轻轻松松上路。 Visual Studio Code Tips and Tricks]]></content>
      <categories>
        <category>器(Tool)</category>
      </categories>
      <tags>
        <tag>guide</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo写作Cookbook]]></title>
    <url>%2F2018%2F07%2F27%2Fhexo-writting-cookbook%2F</url>
    <content type="text"><![CDATA[此博文做为 Hexo 写作的 Cookbook，记录写作中常用内容，方便参考引用。 命令部署(Deployment)123hexo cleanhexo ghexo d 运行(Run)12hexo shexo s --draft 发布（Push）1hexo publish [layout] &lt;title&gt; 写作(Writting) Hexo 写作 Front-matter 标签插件（Tag Plugins）Note1&#123;% note class_name %&#125; Content (md partial supported) &#123;% endnote %&#125; 其中，class_name 可以是以下列表中的一个值： default primary success info warning danger 123&#123;% note warning 不要处理我的文章 %&#125;如果你不想你的文章被处理，你可以将 Front-Matter 中的`layout:` 设为 `false` 。&#123;% endnote %&#125; 如果你不想你的文章被处理，你可以将 Front-Matter 中的layout: 设为 false 。 突破容器宽度限时的图片123456789&lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;&lt;!-- 其中 class=&quot;full-image&quot; 是必须的 --&gt;&lt;img src=&quot;/image-url&quot; class=&quot;full-image&quot; /&gt;&lt;!-- 标签 方式，要求版本在0.4.5或以上 --&gt;&#123;% fullimage /image-url, alt, title %&#125;&lt;!-- 别名 --&gt;&#123;% fi /image-url, alt, title %&#125; 引用(quote)引用书上的句子 123&#123;% blockquote David Levithan, Wide Awake %&#125;Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.&#123;% endblockquote %&#125; Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy. David LevithanWide Awake 引用网络上的文章 123&#123;% blockquote Seth Godin http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %&#125;Every interaction is both precious and an opportunity to delight.&#123;% endblockquote %&#125; Every interaction is both precious and an opportunity to delight. Seth GodinWelcome to Island Marketing]]></content>
      <categories>
        <category>器(Tool)</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>cookbook</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo Guide 新手知识]]></title>
    <url>%2F2018%2F07%2F27%2Fhexo-guide%2F</url>
    <content type="text"><![CDATA[具体怎么通过 Hexo 搭建个人博客，已经有很多很好的博文了。此文专注记录用 Hexo 写博文过程中遇到的问题和 tips。将持续更新！ Hexo 初解Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 Hexo官网hexo.io/zh-cn/docs Markdown: 轻量级标记语言, 是方便作者写博文，仅仅是内容。Markdown 渲染引擎让它如静态网页一样呈现。（原材料） Theme: 为了更好的互动，让博文更绚丽，有调理的呈现。（染料） Hexo：让 Markown 穿上 Theme 的衣服（渲染引擎），更好组织和交互。（作坊，生产线） Hexo整套思路是借鉴Jekyll，只是用NodeJS又实现了一次，个人感觉易用性更好了，性能也比Ruby实现的要好。 布局(Layout)刚接触 Hexo 的时候很让我感觉迷惑的两个 layout。一个是 scaffolds 中的 draft、page and post 的 md 文档，该博文中命名为Scaffolds Layout(是生成不同文档的脚手架模板)。Theme 中的 layout,才是真正的我们理解的 layout。该博文中命名为Theme Layout。 Scaffolds Layout: scaffolds 中的 draft、page and post 的 md 文档 Theme Layout: Theme 中的 layout, swig or ejs 文件 Scaffolds Layout1$ hexo new [layout] &lt;title&gt; 如上命令中的 layout，是指Scaffolds Layout。 预定义了post 、 page和draft markdown 文件做为脚手架模板，为了快速生成文档，如下是默认生成路径。如果在 scaffolds 增加自己的Scaffolds Layout，会生成文件到source/_posts文件夹。 Scaffolds Layout Path post source/_posts page source draft source/_drafts 如上默认Scaffolds Layout分别代表三种类别，这是Hexo程序逻辑控制的。 post: 博文 page: 单独HTML页面, 如Menu菜单中的tags, categories, about … draft: 临时博文 脚手架文档模板中Scaffolds Layout设置了什么？ 123456---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;tags:categories:--- 其实缺少了layout的设置，默认是post，可以通过修改 _config.yml 中的 default_layout 参数来指定默认布局。这才是Theme Layout。这是两者的关系。 Theme Layout themes文件中，对应theme的layout文件夹下面的文件。 可以通过修改Site _config.yml 中的 default_layout 参数来指定默认Theme Layout。 如果改变页面样子，应该在这里修改。 为了更好的重用，他们会extends或者嵌套另一个layout，看看page和tag layout关系就知道了。 为了足够动态控制，一定了标签和变量。 Categories and Tags Mapping Categories and Tags with Hexo在Hexo默认配置文件中_config.yml, 有两个配置项category_map和tag_map，主要是影响点击后的url路径。 如何增加Categories和Tags页面，解决404 error 1234567$ hexo new page tags$ hexo new page categories# 会生成 source/tags/index.md# 会生成 source/categories/index.md# 然后分别增加如下行，如果你是用Theme Next，其他可能加入对一个的layout# add line: type: "tags"# add line: type: "categories" Markdown 表格(Table)不能正常展示发现Hexo默认采用插件hexo-renderer-marked做为markdown的渲染。我在表格前加个空格就不能正常渲染，去掉就可以了。 Markdown代码块语言 Language names and aliases Website Visiting Analyzes网站访问统计： Google webmasters 百度统计 Tips Hexo引用站内文章]]></content>
      <categories>
        <category>器(Tool)</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>guide</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F07%2F25%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Abel’s Blog! As a developer, we are always using “Hello World” as a start. From today, I would like to write down somthing here. Hope it’s helpful for myself. It will be better if it is also helpful for you. 突如其来有个想法，做个人博客，源于前几天两个词汇冒入脑中挥之不去，较真和蚂蚁。 蚂蚁(Ant)蚂蚁为典型的社会性群体。具有社会性的 3 大要素：同种个体间能相互合作照顾幼体；具明确的劳动分工；在蚁群内至少二个世代重叠（不排除个别情况），且子代能在一段时间内照顾上一代。 蚂蚁绝对是建筑专家，蚁巢内有许多分室，这些分室各有用处。蚁窝牢固、安全、舒服，道路四通八达，错综复杂。蚁窝外面还有一圈土，还有一些储备食物的地方，里面通风、凉快、冬暖夏凉，食物不易坏掉。 蚂蚁也是动物世界赫赫有名的建筑师。它们利用颚部在地下挖洞，通过一粒一粒搬运沙土，建造它们的蚁穴。蚁穴的“房间”将一直保持建造之初的形态，除非土壤严重干化。 较真儿可能自己就是这样一个人吧，在自己在意的方面。恰巧自己又是一个码农，希望在码农方面保持较真儿吧，虽然有些累。 综上，我博客的 slogan 就是有点较真儿的搬运工！！！]]></content>
      <categories>
        <category>悟(Tattle)</category>
      </categories>
      <tags>
        <tag>ant</tag>
        <tag>较真儿</tag>
      </tags>
  </entry>
</search>
